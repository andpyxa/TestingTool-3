
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РедактироватьКонструктором = Истина;
	ИдентификаторКонструктора = "PackTaskTestBuilder";
	ЭтоПроверка = Истина;
	МенеджерТестирования = Справочники.ТестируемыеКлиенты.ТекущийКлиент1С;
	
	// Открыта форма редактирования
	Если ЗначениеЗаполнено(Параметры.Задание) Тогда		
		Задание = Параметры.Задание;
	КонецЕсли;
	
	Если Параметры.Свойство("ОбъектыНазначения") Тогда
		Если ТипЗнч(Параметры.ОбъектыНазначения) = Тип("Массив")
			И Параметры.ОбъектыНазначения.Количество()>0 Тогда			
			Задание = Параметры.ОбъектыНазначения[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Задание) Тогда
		Элементы.СоздатьНовоеЗадание.Заголовок = "Применить изменения";
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Задания.Наименование КАК Наименование,
		|	Задания.ID КАК ID,
		|	Задания.Автор КАК Автор,
		|	Задания.ГруппаЗадания КАК ГруппаЗадания,
		|	Задания.Ответственный КАК Ответственный,
		|	Задания.ИдентификаторКонструктора КАК ИдентификаторКонструктора,
		|	Задания.Родитель КАК Родитель,
		|	Задания.ТестируемыйКлиент КАК ТестируемыйКлиент
		|ИЗ
		|	Справочник.Задания КАК Задания
		|ГДЕ
		|	Задания.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка",Задание);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			ВызватьИсключение "Ошибка редактирования запроса в конструкторе...";
			
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		                    		
		Наименование = Выборка.Наименование;
		TaskID = Выборка.ID; 
		Ответственный = Выборка.Ответственный;
		ГруппаЗадания = Выборка.ГруппаЗадания;
		Родитель =  Выборка.Родитель;
		ТестируемыйКлиент = Выборка.ТестируемыйКлиент;
		
		
		// получим тест из регистра
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПеременныеЗаданий.ЗначениеПеременной КАК Ссылка
		|ИЗ
		|	РегистрСведений.ПеременныеЗаданий КАК ПеременныеЗаданий
		|ГДЕ
		|	ПеременныеЗаданий.Задание = &Задание
		|	И ПеременныеЗаданий.ИмяПеременной = &ИмяПеременной
		|	И ПеременныеЗаданий.ЭтоПараметрНастройки = ИСТИНА";
		Запрос.УстановитьПараметр("Задание",Задание);
		Запрос.УстановитьПараметр("ИмяПеременной",Справочники.ИменаПеременных.МенеджерТестирования);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			МенеджерТестирования = Выборка.Ссылка;
		КонецЕсли;		
		
		АдресИнтернетExternalAutomationUI = КонструкторЗаданийСервер.ПолучитьЗначениеПараметра(Задание,"%АдресИнтернетExternAutomationUI%", Ложь);
		
	Иначе
		
		//Элементы.Задание.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(АдресИнтернетExternalAutomationUI) Тогда
		АдресИнтернетExternalAutomationUI = "http://localhost:8080";
		ПортExternalAutomationUI = "8080";
	КонецЕсли; 
	
	Элементы.СтраницыОбработки.ОтображениеСтраниц=ОтображениеСтраницФормы.Нет;
	ОтработатьПеремещениеПоСтраницам();
КонецПроцедуры

&НаКлиенте
Процедура Вперед(Команда)
	Если Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаИнициализация Тогда
		Если НЕ ПроверитьНаличиеПодобноегоЗадания(Наименование,TaskID,Задание) Тогда
			Если НЕ ЗначениеЗаполнено(ТестируемыйКлиент) Тогда
				Сообщить("Выберите тестируемый клиент прежде!");
			Иначе
				// получим данные по существующему заданию
				Если ЗначениеЗаполнено(Задание) Тогда
					ПолучитьСоставПоЗаданию();
				КонецЕсли;
				
				Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаСоставЗадания;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаСоставЗадания Тогда
		Если ПараметрыУказанияПараметровЗаданияКорректны() Тогда
			ОбобщениеHTML = СформироватьОписаниеСоздаваемогоЗдания();
			Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаИтого;
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаИтого Тогда
	КонецЕсли;
	
	ОтработатьПеремещениеПоСтраницам();
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	Если Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаИнициализация Тогда
	ИначеЕсли Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаСоставЗадания Тогда
		Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаИнициализация;
	ИначеЕсли Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаИтого Тогда
		Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаСоставЗадания;
	КонецЕсли;	
		
	ОтработатьПеремещениеПоСтраницам();
КонецПроцедуры

&НаСервере
Функция СоздатьНовоеЗаданиеНаСервере()
	
	Отказ = Ложь;	
	ЗаданиеОбъект = Неопределено;
	
	НачатьТранзакцию();
	
	// Создаем/ обновляем задание
	Если ЗначениеЗаполнено(Задание) Тогда
		ЗаданиеОбъект = Задание.ПолучитьОбъект();
	Иначе
		ЗаданиеОбъект = Справочники.Задания.СоздатьЭлемент();
	КонецЕсли;	
	
	ЗаданиеОбъект.Наименование = Наименование;
	ЗаданиеОбъект.ID = TaskID;
	ЗаданиеОбъект.Родитель = Родитель;
	ЗаданиеОбъект.ГруппаЗадания = ГруппаЗадания;
	ЗаданиеОбъект.РедактироватьКонструктором = РедактироватьКонструктором;
	ЗаданиеОбъект.ИдентификаторКонструктора = ИдентификаторКонструктора;
	ЗаданиеОбъект.Ответственный = Ответственный;
	ЗаданиеОбъект.ЭтоПроверка = ЭтоПроверка;
	ЗаданиеОбъект.ТестируемыйКлиент = ТестируемыйКлиент;
	Если НЕ ЗначениеЗаполнено(ЗаданиеОбъект.Автор) Тогда
		ЗаданиеОбъект.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Попытка
		ЗаданиеОбъект.Записать();
		Задание = ЗаданиеОбъект.Ссылка;
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
		Сообщить(ОписаниеОшибки());		
		Возврат НЕ Отказ;
	КонецПопытки;
	
	
	// обновляем регистр состав
	НаборЗаписей = РегистрыСведений.СоставЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задание.Установить(Задание);
	
	Для каждого стр из СоставЗадания Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Задание = Задание;
		НоваяЗапись.ПорядокВыполнения = стр.ПорядокВыполнения;
		НоваяЗапись.ПодчиненноеЗадание = стр.ПодчиненноеЗадание;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	// создаем необходимые переменные
	НаборЗаписей = РегистрыСведений.ПеременныеЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задание.Установить(Задание);
	
	
	Если ЗначениеЗаполнено(ТестируемыйКлиент) Тогда
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Задание = Задание;
		НоваяЗапись.ИмяПеременной = "%СтрокаСоединенияИБ%";
		НоваяЗапись.ЗначениеПеременной = ТестируемыйКлиент;
		НоваяЗапись.ИспользоватьФункцию = Истина;
		НоваяЗапись.ИмяФункции = "СтрокаСоединенияИБ";
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Задание = Задание;
		НоваяЗапись.ИмяПеременной = "%ЭтоФайловаяБаза1С%";
		НоваяЗапись.ЗначениеПеременной = ТестируемыйКлиент;
		НоваяЗапись.ИмяРеквизита = "База1С.ФайловаяБаза";			
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Задание = Задание;
		НоваяЗапись.ИмяПеременной = "%СтрокаСоединения%";
		НоваяЗапись.ЗначениеПеременной = ТестируемыйКлиент;
		НоваяЗапись.ИспользоватьФункцию = Истина;
		НоваяЗапись.ИмяФункции = "СтрокаСоединения";
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Задание = Задание;
		НоваяЗапись.ИмяПеременной = "%ИмяПользователя1С%";
		НоваяЗапись.ЗначениеПеременной = ТестируемыйКлиент;
		НоваяЗапись.ИспользоватьФункцию = Истина;
		НоваяЗапись.ИмяФункции = "ИмяПользователя1С";
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Задание = Задание;
		НоваяЗапись.ИмяПеременной = "%ПарольПользователя1С%";
		НоваяЗапись.ЗначениеПеременной = ТестируемыйКлиент;
		НоваяЗапись.ИспользоватьФункцию = Истина;
		НоваяЗапись.ИмяФункции = "ПарольПользователя1С";		
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Задание = Задание;
		НоваяЗапись.ИмяПеременной = "%ИдентификаторКлиента%";
		НоваяЗапись.ЗначениеПеременной = ТестируемыйКлиент;
		НоваяЗапись.ИмяРеквизита = "ID";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МенеджерТестирования) Тогда
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Задание = Задание;
		НоваяЗапись.ИмяПеременной = Справочники.ИменаПеременных.МенеджерТестирования;
		НоваяЗапись.ЗначениеПеременной = МенеджерТестирования;
		НоваяЗапись.ЭтоПараметрНастройки = Истина;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Задание = Задание;
		НоваяЗапись.ИмяПеременной = "%СтрокаСоединенияМенеджер%";
		НоваяЗапись.ЗначениеПеременной = МенеджерТестирования;
		НоваяЗапись.ИспользоватьФункцию = Истина;
		НоваяЗапись.ИмяФункции = "СтрокаСоединения";		
	КонецЕсли;
	
	
	НаборЗаписей.Записать();
	
	КонструкторЗаданийСервер.УстановитьПараметр(Задание,"%АдресИнтернетExternAutomationUI%",АдресИнтернетExternalAutomationUI,Ложь); 		
	
	ЗафиксироватьТранзакцию();
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Процедура СоздатьНовоеЗадание(Команда)
	Если СоздатьНовоеЗаданиеНаСервере()=Истина Тогда
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьПеремещениеПоСтраницам()
	
	Если Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаИнициализация Тогда
		Элементы.Назад.Видимость = Ложь;
		Элементы.Вперед.Видимость = Истина;
		Элементы.СоздатьНовоеЗадание.Видимость = Ложь;
	ИначеЕсли Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаСоставЗадания Тогда
		Элементы.Назад.Видимость = Истина;
		Элементы.Вперед.Видимость = Истина;
		Элементы.СоздатьНовоеЗадание.Видимость = Ложь;
	ИначеЕсли Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаИтого Тогда
		Элементы.Назад.Видимость = Истина;
		Элементы.Вперед.Видимость = Ложь;
		Элементы.СоздатьНовоеЗадание.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(TaskID) Тогда
		TaskID = СценарноеТестированиеКлиентСервер.СформироватьАвтоматическиИдентификаторТеста(Наименование);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьНаличиеПодобноегоЗадания(Знач Наименование,Знач TaskID,Знач Задание)   	
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		Сообщить("Укажите наименование нового задания!");
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(TaskID) Тогда
		Сообщить("Укажите идентификатор нового задания!");
		Возврат Истина;
	КонецЕсли;
	
	// проверим, есть ли такое задание
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задания.Ссылка,
	|	Задания.ID,
	|	Задания.Наименование
	|ИЗ
	|	Справочник.Задания КАК Задания
	|ГДЕ
	|	(Задания.Наименование = &Наименование
	|			ИЛИ Задания.ID = &TaskID)
	|	И НЕ Задания.Ссылка = &Задание";
	
	Запрос.УстановитьПараметр("Наименование",Наименование);
	Запрос.УстановитьПараметр("TaskID",TaskID);
	Запрос.УстановитьПараметр("Задание",Задание);

	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Сообщить("Уже существет задание с подобным именем или идентификатором. Измените вводимые данные! Наименование - " +Выборка.Наименование+" Идентификатор - "+Выборка.TaskID);
		
	КонецЦикла;
	
	
	Возврат Истина;
	
	
КонецФункции

&НаСервере
Функция ПараметрыУказанияПараметровЗаданияКорректны()
	
	Отказ = Ложь;
	
	Если СоставЗадания.Количество()=0 Тогда
		Отказ = Истина;
		Сообщить("Укажите хотябы одно задание в пакете!");
	КонецЕсли;
	
	Для каждого стр из СоставЗадания Цикл
		Если стр.ПодчиненноеЗадание.ЭтоПроверка=Истина Тогда
			Отказ = Истина;
			Сообщить("Нельзя выбирать подчиненным задание проверку "+стр.ПодчиненноеЗадание);
		КонецЕсли;
		Если стр.ПодчиненноеЗадание=Задание Тогда
			Отказ = Истина;
			Сообщить("Нельзя выбирать подчиненным текущее задание!");
		КонецЕсли;
	КонецЦикла;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаСервере
Процедура ПолучитьСоставПоЗаданию()
	
	Если НЕ СоставЗадания.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоставЗаданий.ПодчиненноеЗадание КАК ПодчиненноеЗадание,
	|	СоставЗаданий.ПорядокВыполнения КАК ПорядокВыполнения
	|ИЗ
	|	РегистрСведений.СоставЗаданий КАК СоставЗаданий
	|ГДЕ
	|	СоставЗаданий.Задание = &Задание
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоставЗаданий.ПорядокВыполнения";
	Запрос.УстановитьПараметр("Задание",Задание);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		стр_н = СоставЗадания.Добавить();
		стр_н.ПорядокВыполнения = Выборка.ПорядокВыполнения;
		стр_н.ПодчиненноеЗадание = Выборка.ПодчиненноеЗадание;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьОписаниеСоздаваемогоЗдания()
	
	Html = "<html><head></head><body>";
	Html = Html + "<h3>Свойства задания</h3>";
	Html = Html + "<b>Наименование:</b>  <span color='blue'>"+Наименование+"</span></br>";
	Html = Html + "<b>Идентификатор задания:</b> <span color='blue'>"+TaskID+"</span></br>";
	Html = Html + "<b>Тестируемый клиент:</b> <span color='blue'>"+ТестируемыйКлиент+"</span></br>";
	Html = Html + "<b>Это проверка:</b> <span color='blue'>"+ЭтоПроверка+"</span></br>";
	Html = Html + "Ответственный: "+?(ЗначениеЗаполнено(Ответственный),Ответственный,"---")+"</br>";
	Html = Html + "Родитель: "+?(ЗначениеЗаполнено(Родитель),Родитель,"---")+"</br>";
	Html = Html + "ГруппаЗадания: "+?(ЗначениеЗаполнено(ГруппаЗадания),ГруппаЗадания,"---")+"</br>";
	Html = Html + "<h3>Структура действий</h3>";
	Html = Html + "Состоит из шагов "+СоставЗадания.Количество();
	Html = Html + "<table><th>Порядок</th><th>Подчиненное задание</th>";
	Для каждого стр из СоставЗадания Цикл
		Html = Html + "<tr><td>"+стр.ПорядокВыполнения+"</td><td>"+стр.ПодчиненноеЗадание+"</td></tr>";	
	КонецЦикла;
	Html = Html + "</table>";
	Html = Html+"</body></html>";
	
	Возврат Html;
	
КонецФункции