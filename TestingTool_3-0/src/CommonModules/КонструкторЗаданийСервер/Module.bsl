
#Область РаботаСПараметрами

// Процедура - Создать/обновить параметр
//  Создает или обновляет настройку парамтера. Для служебных параметров, которые предназначены только для определения использования в редакторе, 
//  используйте опцию (ЭтоПараметрНастройки=Истина)
Процедура УстановитьПараметр(Знач Владелец, Знач ИмяПеременной, Знач ЗначениеПеременной, Знач ЭтоПараметрНастройки=Истина, ОписаниеСвойств=Неопределено ) Экспорт
	
	Ключ = Неопределено;
	НомерАргумента = 0;
	ИмяРеквизита = "";
	ИмяФункции = "";
	
	Если ТипЗнч(ОписаниеСвойств)=Тип("Структура") Тогда
		ОписаниеСвойств.Свойство("Ключ",Ключ);
		ОписаниеСвойств.Свойство("НомерАргумента",НомерАргумента);
		ОписаниеСвойств.Свойство("ИмяРеквизита",ИмяРеквизита);
		ОписаниеСвойств.Свойство("ИмяФункции",ИмяФункции);
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ПеременныеЗаданий.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Задание 					= Владелец;	
	МенеджерЗаписи.ИмяПеременной 			= ИмяПеременной;
	МенеджерЗаписи.НомерАргумента 			= НомерАргумента;
	МенеджерЗаписи.Ключ 					= Ключ;
	МенеджерЗаписи.ЗначениеПеременной 		= ЗначениеПеременной;
	МенеджерЗаписи.ЭтоПараметрНастройки 	= ЭтоПараметрНастройки;
	МенеджерЗаписи.ИмяРеквизита 			= ИмяРеквизита;
	Если ЗначениеЗаполнено(ИмяФункции) Тогда
		МенеджерЗаписи.ИмяФункции 			= ИмяФункции;
		МенеджерЗаписи.ИспользоватьФункцию 	= Истина;
	КонецЕсли;
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры


// Возвращает значение переменной
Функция  ПолучитьЗначениеПараметра(Знач Владелец, Знач ИмяПеременной, Знач ЭтоПараметрНастройки=Истина, Знач Ключ=Неопределено)  Экспорт
	
	ЗначениеПараметра = Неопределено;
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПеременныеЗаданий.ЗначениеПеременной КАК Значение
	|ИЗ
	|	РегистрСведений.ПеременныеЗаданий КАК ПеременныеЗаданий
	|ГДЕ
	|	ПеременныеЗаданий.Задание = &Задание
	|	И ПеременныеЗаданий.ИмяПеременной = &ИмяПеременной
	|	И ПеременныеЗаданий.ЭтоПараметрНастройки = &ЭтоПараметрНастройки
	|	И ПеременныеЗаданий.Ключ = &Ключ";
	Запрос.УстановитьПараметр("Задание",Владелец);
	Запрос.УстановитьПараметр("ИмяПеременной",ИмяПеременной);
	Запрос.УстановитьПараметр("ЭтоПараметрНастройки",ЭтоПараметрНастройки);
	Запрос.УстановитьПараметр("Ключ",Ключ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗначениеПараметра = Выборка.Значение;
	КонецЕсли;

	Возврат ЗначениеПараметра;
	
КонецФункции

#КонецОбласти


#Область РаботаСШаблонами

// Создаем шаблон
Функция СоздатьШаблонКоманды(Знач ИдентификаторКонструктора, Знач Наименование, Знач КлючПоиска, Знач ТекстШаблона) Экспорт
	
	ШаблонСсылка = Справочники.ШаблоныКоманд.ПустаяСсылка();
	
	ШаблонОбъект = Справочники.ШаблоныКоманд.СоздатьЭлемент();
	ШаблонОбъект.Наименование 				= Наименование;
	ШаблонОбъект.ИдентификаторКонструктора 	= ИдентификаторКонструктора;
	ШаблонОбъект.ТекстШаблона 				= ТекстШаблона;
	ШаблонОбъект.РедактироватьКонструктором = Истина;
	
	ШаблонОбъект.Записать();
	ШаблонСсылка = ШаблонОбъект.Ссылка;
	
	Возврат ШаблонСсылка;
КонецФункции

// Найти шблон
Функция НайтиШаблонКоманды(Знач ИдентификаторКонструктора,Знач ТекстШаблона="",Знач КлючПоиска="") Экспорт
	
	ШаблонСсылка = Справочники.ШаблоныКоманд.ПустаяСсылка();
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	0 КАК Порядок
	|ИЗ
	|	РегистрСведений.ПеременныеЗаданий КАК ПеременныеЗаданий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныКоманд КАК Т
	|		ПО ПеременныеЗаданий.Задание = Т.Ссылка
	|			И (ПеременныеЗаданий.НомерАргумента = 0)
	|			И (ПеременныеЗаданий.Ключ = НЕОПРЕДЕЛЕНО)
	|			И (ПеременныеЗаданий.ИмяПеременной = &ИмяПеременной)
	|			И (ПеременныеЗаданий.ЗначениеПеременной = &КлючПоиска)
	|ГДЕ
	|	Т.ИдентификаторКонструктора = &ИдентификаторКонструктора
	|	И Т.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Ссылка,
	|	1
	|ИЗ
	|	Справочник.ШаблоныКоманд КАК Т
	|ГДЕ
	|	Т.ПометкаУдаления = ЛОЖЬ
	|	И (ВЫРАЗИТЬ(Т.ТекстШаблона КАК СТРОКА(1000))) = (ВЫРАЗИТЬ(&ТекстШаблона КАК СТРОКА(1000)))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Запрос.УстановитьПараметр("ИдентификаторКонструктора",ИдентификаторКонструктора);
	Запрос.УстановитьПараметр("ИмяПеременной",Справочники.ИменаПеременных.КлючПоиска);
	Запрос.УстановитьПараметр("КлючПоиска",КлючПоиска);
	Запрос.УстановитьПараметр("ТекстШаблона",ТекстШаблона);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ШаблонСсылка = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ШаблонСсылка;
КонецФункции

#КонецОбласти


#Область РаботаСДействиями

// Создаем действие задания
Функция СоздатьДействиеЗадания(Знач ИдентификаторКонструктора, Знач СвойстваЗадания) Экспорт
	
	ДействиеСсылка = Справочники.ДействияЗаданий.ПустаяСсылка();
	
	Если ТипЗнч(СвойстваЗадания)=Тип("Структура") Тогда
		
		ДействиеОбъект = Справочники.ДействияЗаданий.СоздатьЭлемент();
		
		// по умолчанию заполним
		ДействиеОбъект.ИдентификаторКонструктора 	= ИдентификаторКонструктора;
		ДействиеОбъект.РедактироватьКонструктором	= Истина;
		ДействиеОбъект.Автор						= Пользователи.ТекущийПользователь();
		
		// перезаполним из структуры
		ЗаполнитьЗначенияСвойств(ДействиеОбъект,СвойстваЗадания);
		
		ДействиеОбъект.Записать();
		ДействиеСсылка = ДействиеОбъект.Ссылка;
	Иначе
		
		ВызватьИсключение "Ожидается структура 'СвойстваЗадания', а передены не верные данные!";
		
	КонецЕсли;

	Возврат ДействиеСсылка;
КонецФункции


Функция НайтиДействиеЗадания(Знач ИдентификаторКонструктора, Знач КлючПоиска) Экспорт
	
	ДействиеСсылка = Справочники.ШаблоныКоманд.ПустаяСсылка();
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	0 КАК Порядок
	|ИЗ
	|	РегистрСведений.ПеременныеЗаданий КАК ПеременныеЗаданий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияЗаданий КАК Т
	|		ПО ПеременныеЗаданий.Задание = Т.Ссылка
	|			И (ПеременныеЗаданий.НомерАргумента = 0)
	|			И (ПеременныеЗаданий.Ключ = НЕОПРЕДЕЛЕНО)
	|			И (ПеременныеЗаданий.ИмяПеременной = &ИмяПеременной)
	|			И (ПеременныеЗаданий.ЗначениеПеременной = &КлючПоиска)
	|ГДЕ
	|	Т.ИдентификаторКонструктора = &ИдентификаторКонструктора
	|	И Т.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Запрос.УстановитьПараметр("ИдентификаторКонструктора",ИдентификаторКонструктора);
	Запрос.УстановитьПараметр("ИмяПеременной",Справочники.ИменаПеременных.КлючПоиска);
	Запрос.УстановитьПараметр("КлючПоиска",КлючПоиска);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ДействиеСсылка = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ДействиеСсылка;
КонецФункции


#КонецОбласти


#Область РаботаССоставомЗаданий

// Очищаем полностью состав заданий
Процедура ОчиститьСоставЗаданий(Знач Задание) Экспорт
	
	НаборЗаписей = РегистрыСведений.СоставЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задание.Установить(Задание);
	НаборЗаписей.Записать(Истина);	
	
КонецПроцедуры

// добавить действие в состав заданий
Процедура ДобавитьВСоставЗаданий(Знач Задание, Знач Действие, Знач ПорядокВыполнения, Знач ПодчиненноеЗадание=Неопределено) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.СоставЗаданий.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Задание 					= Задание;	
	МенеджерЗаписи.Действие 				= Действие;
	МенеджерЗаписи.ПорядокВыполнения 		= ПорядокВыполнения;
	МенеджерЗаписи.ПодчиненноеЗадание 		= ПодчиненноеЗадание;
	
	МенеджерЗаписи.Записать(Истина);	
	
КонецПроцедуры

#КонецОбласти


#Область РаботаСЗаданиями

Функция СоздатьОбновитьЗадание(Знач Задание, Знач СвойстваЗадания)  Экспорт
	
	Если ЗначениеЗаполнено(Задание) Тогда
		ЗаданиеОбъект = Задание.ПолучитьОбъект();
	Иначе
		ЗаданиеОбъект = Справочники.Задания.СоздатьЭлемент();
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(ЗаданиеОбъект, СвойстваЗадания);
	
	Если НЕ ЗначениеЗаполнено(ЗаданиеОбъект.Автор) Тогда
		ЗаданиеОбъект.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ЗаданиеОбъект.Записать();
	
	Возврат ЗаданиеОбъект.Ссылка;
КонецФункции

Функция НайтиЗаданиеПоID(Знач ID,Знач Задание=Неопределено) Экспорт
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Задания.Ссылка
	|ИЗ
	|	Справочник.Задания КАК Задания
	|ГДЕ
	|	Задания.ID = &ID
	|	И Задания.Ссылка <> &Задание";
	Запрос.УстановитьПараметр("ID",ID);
	Запрос.УстановитьПараметр("Задание",Задание);

	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.Задания.ПустаяСсылка();
	
КонецФункции

#КонецОбласти

#Область Разное

Функция ПолучитьПортАдресаИнтернет(Знач АдресИнтернет,Знач ПоУмолчанию=80) Экспорт
	Порт = ПоУмолчанию;
	АдресИнтернет = СтрЗаменить(АдресИнтернет,"http://","");
	АдресИнтернет = СтрЗаменить(АдресИнтернет,"https://","");
	ПозицияДвоеточия = Найти(АдресИнтернет,":");
	Если ПозицияДвоеточия<>0 Тогда
		АдресИнтернет = СокрЛП(АдресИнтернет);
		ПортСтр = "";
		Для ш=ПозицияДвоеточия+1 по СтрДлина(АдресИнтернет) Цикл
			ТекСимвол = Сред(АдресИнтернет,ш,1);
			Если Найти("0123456789",ТекСимвол) Тогда
				ПортСтр = ПортСтр+ТекСимвол;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Попытка 
			Порт = XMLСтрока(Число(ПортСтр));
		Исключение
			ЗаписьЖурналаРегистрации("Введенный адрес интернет ("+АдресИнтернет+") не корректный (шаблон:'http://localhost:8080')");
		КонецПопытки;
	КонецЕсли;
	Возврат Порт;
КонецФункции

#КонецОбласти