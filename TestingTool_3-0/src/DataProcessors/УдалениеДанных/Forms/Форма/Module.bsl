
&НаКлиенте
Процедура ПредставлениеРасписанияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Д = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Д.Показать(Новый ОписаниеОповещения("ПредставлениеРасписанияНажатиеЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРасписанияНажатиеЗавершение(Расписание, Доп) Экспорт
	Если Расписание=Неопределено Тогда
		Возврат;
	КонецЕсли;
	УстановитьПараметрыЗаданияСервер(УдалятьУстаревшиеСобытияПоРасписанию, Расписание);
	ОбновитьСостояниеЗаданияСервер();
КонецПроцедуры

&наСервереБезКонтекста
Процедура УстановитьПараметрыЗаданияСервер(Использование, Расписание = Неопределено)
	РЗ = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.УдалениеУстаревшихСобытий);
	ЗаписатьИзменения = Ложь;
	Если Использование <> РЗ.Использование Тогда
		РЗ.Использование = Использование;
		ЗаписатьИзменения = Истина;
		РЗ.Записать();
	КонецЕсли;
	Если Расписание <> Неопределено Тогда
		РЗ.Расписание = Расписание;
		ЗаписатьИзменения = Истина;
	КонецЕсли;
	Если ЗаписатьИзменения=Истина Тогда
		РЗ.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСейчас(Команда)
	ВыполнитьСейчасНаСервере();
	ОбновитьСостояниеВыполненияСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеВыполнения(Команда)
	ОбновитьСостояниеВыполненияСервер();
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ВыполнитьСейчасНаСервере()
	СценарноеТестированиеСервер.УдалениеУстаревшихСобытий();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СрокХраненияСобытий = Константы.СрокХраненияСобытий.Получить();
	ОбновитьСостояниеЗаданияСервер();
	ОбновитьСостояниеВыполненияСервер();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеВыполненияСервер()
	Если СрокХраненияСобытий=0 Тогда
		СостояниеВыполнения = "Удаление отключено";
	Иначе		
		Запрос = Новый Запрос(ТекстЗапросаКоличествоОбъектов());
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Запрос.УстановитьПараметр("СрокХранениСобытий", СрокХраненияСобытий);
		Результаты = Запрос.ВыполнитьПакет();
		КУдалению0 = Результаты[0].Выгрузить().Итог("Количество");
		КУдалению1 = Результаты[1].Выгрузить().Итог("Количество");
		Если КУдалению0+КУдалению1=0 Тогда
			СостояниеВыполнения = "Нет объектов к удалению";
		Иначе
			СостояниеВыполнения = СтрШаблон("К удалению: %1/%2", КУдалению0, КУдалению1);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаКоличествоОбъектов()
	Возврат "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Т.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.Проверки КАК Т
	|ГДЕ
	|	Т.ПометкаУдаления
	|	ИЛИ &СрокХранениСобытий <> 0
	|	И РАЗНОСТЬДАТ(Т.ДатаНачала, &ТекущаяДата, День) > &СрокХранениСобытий
	|	ИЛИ Т.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВариантыХраненияСобытий.ДляУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Т.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.Сборки КАК Т
	|ГДЕ
	|	Т.ПометкаУдаления
	|	ИЛИ &СрокХранениСобытий <> 0
	|	И РАЗНОСТЬДАТ(Т.ДатаНачала, &ТекущаяДата, День) > &СрокХранениСобытий";
КонецФункции

&НаСервере
Процедура ОбновитьСостояниеЗаданияСервер()
	РЗ = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.УдалениеУстаревшихСобытий);
	УдалятьУстаревшиеСобытияПоРасписанию = РЗ.Использование;
	РасписаниеРегламентногоЗадания = РЗ.Расписание;
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗадания);
КонецПроцедуры

&НаКлиенте
Процедура СрокХраненияСобытийПриИзменении(Элемент)
	УстановитьКонстантуСрокХраненияСобытийСервер(СрокХраненияСобытий);
	ОбновитьСостояниеВыполненияСервер();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьКонстантуСрокХраненияСобытийСервер(СрокХраненияСобытий)
	Константы.СрокХраненияСобытий.Установить(СрокХраненияСобытий);	
КонецПроцедуры

&НаКлиенте
Процедура УдалятьУстаревшиеСобытияПоРасписаниюПриИзменении(Элемент)
	УстановитьПараметрыЗаданияСервер(УдалятьУстаревшиеСобытияПоРасписанию);
	УстановитьОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОбработчикОжидания()
	Если УдалятьУстаревшиеСобытияПоРасписанию Тогда
		ПодключитьОбработчикОжидания("ОбновитьСостояниеВыполненияТаймер", 30);
	Иначе
		ОтключитьОбработчикОжидания("ОбновитьСостояниеВыполненияТаймер");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеВыполненияТаймер() Экспорт
	ОбновитьСостояниеВыполненияСервер();
КонецПроцедуры
