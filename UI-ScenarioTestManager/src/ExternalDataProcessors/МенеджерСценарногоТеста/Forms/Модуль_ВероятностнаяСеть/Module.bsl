&НаКлиенте
Перем Модуль_СтеммерПортера;
&НаКлиенте
Перем Модуль_ОбработкаТекста;
&НаКлиенте
Перем вхНастройка;
&НаКлиенте
Перем КешВсехДанных;


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Вставить содержимое обработчика
КонецПроцедуры


&НаКлиенте
Процедура ПоискБлизкихДокументов(Команда)
	РезультатКлассификации = ВыполнитьКлассификациюТекста(СтрокаЗапроса,вхНастройка);
	ОбработаннаяСтрокаЗапроса = Модуль_ОбработкаТекста.ОбработатьТекстДанных(СтрокаЗапроса,вхНастройка);
	
	ТаблицаРезультатаБлизости.Очистить();
	
	стр_н = ТаблицаРезультатаБлизости.Добавить();
	стр_н.Класс = РезультатКлассификации.КлассОсновной;
	стр_н.Суждение = РезультатКлассификации.СуждениеОсновной;
	стр_н.Оценка = РезультатКлассификации.ОценкаОсновная;
	
	Если ЗначениеЗаполнено(РезультатКлассификации.КлассВторичный) Тогда
		стр_н = ТаблицаРезультатаБлизости.Добавить();
		стр_н.Класс = РезультатКлассификации.КлассВторичный;
		стр_н.Суждение = РезультатКлассификации.СуждениеВторичный;
		стр_н.Оценка = РезультатКлассификации.ОценкаВторичная;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатКлассификации.КлассТретичный) Тогда
		стр_н = ТаблицаРезультатаБлизости.Добавить();
		стр_н.Класс = РезультатКлассификации.КлассТретичный;
		стр_н.Суждение = РезультатКлассификации.СуждениеТретичный;
		стр_н.Оценка = РезультатКлассификации.ОценкаТретичная;
	КонецЕсли;
	
КонецПроцедуры


#Область Классификация

// Функция - Выполняет классификацию текста по шаблону определенной длины (ШиринаСегментнойЛинии)
//
// Параметры:
//  Текст		 - строка - текст запроса, который будет сравниваться с шаблоном
//  мНастройка	 - структура - структура которая содержит настройки работы
// 
// Возвращаемое значение:
//  РезультатКлассификации - структура - возвращает результаты классификации и содержит параметры
//  КлассОсновной,КлассВторичный,КлассТретичный - три подходящих класса по вероятности (по убыванию)
//  ОценкаОсновная,ОценкаВторичная,ОценкаТретичная - три значения оценки
//  СуждениеОсновной,СуждениеВторичный,СуждениеТретичный - три суждения в человеческой форме (совпадает, возможно, сомнительно, скорее случайность, нет)
//
&НаКлиенте
Функция ВыполнитьКлассификациюТекста(Текст,мНастройка,ИмяШаблона="") Экспорт
	РезультатКлассификации = новый Структура("КлассОсновной,КлассВторичный,КлассТретичный,ОценкаОсновная,ОценкаВторичная,ОценкаТретичная,СуждениеОсновной,СуждениеВторичный,СуждениеТретичный","","","",-999999999,-999999999,-999999999,"нет","нет","нет");

	ТаблицаРезультатаБлизости.Очистить();
	КешОбработанныхСтрокКлассификатора = новый Соответствие;
	
	// преобразуем текст в вектор
	ВекторЗапроса = ПолучитьВекторЗапроса(Текст,мНастройка);
	
	СоответствиеКлассовСлов = КешВсехДанных.Получить("СоответствиеКлассовСлов");	
	Если СоответствиеКлассовСлов=Неопределено Тогда
		СоответствиеКлассовСлов = новый Соответствие;
		Для каждого стр из ТаблицаВекторовВероятностиСловКлассов Цикл
			СоответствиеКлассовСлов.Вставить(нрег(стр.Класс+"/"+стр.Слово),стр);
		КонецЦикла;
		КешВсехДанных.Вставить("СоответствиеКлассовСлов",СоответствиеКлассовСлов);
	КонецЕсли;
	
	СоответствиеДистанцииСлов = КешВсехДанных.Получить("СоответствиеДистанцииСлов");
	Если СоответствиеДистанцииСлов=Неопределено Тогда
		СоответствиеДистанцииСлов = новый Соответствие;
		Для каждого стр из ТаблицаВекторовВероятностиСловКлассов Цикл
			Дистанция = 0;
			МассивДист = новый Массив;
			Для шаг=0 по ШиринаСегментнойЛинии Цикл
				Если стр.Вектор.Получить(шаг).Значение.ВероятностьЧастотная<>0 Тогда
					Дистанция = 100*шаг/ШиринаСегментнойЛинии;
					МассивДист.Добавить(Дистанция);
				КонецЕсли;
			КонецЦикла;
			СоответствиеДистанцииСлов.Вставить(нрег(стр.Класс+"/"+стр.Слово),МассивДист);
		КонецЦикла;
		КешВсехДанных.Вставить("СоответствиеДистанцииСлов",СоответствиеДистанцииСлов);
	КонецЕсли;
	
	СоответствиеДистанцииСловЗапрос = новый Соответствие;
	Для шаг=0 по ШиринаСегментнойЛинии Цикл
		Дистанция=100*шаг/ШиринаСегментнойЛинии;
		МассивДист = СоответствиеДистанцииСловЗапрос.Получить(нрег("запрос"+"/"+ВекторЗапроса.Получить(шаг).Значение.Слово));
		Если МассивДист=Неопределено Тогда
			МассивДист = новый Массив;
		КонецЕсли;
		МассивДист.Добавить(Дистанция);
		СоответствиеДистанцииСловЗапрос.Вставить(нрег("запрос"+"/"+ВекторЗапроса.Получить(шаг).Значение.Слово),МассивДист);
	КонецЦикла;
	
	СоответсвиеВероятностиСловПоШаблону = КешВсехДанных.Получить("СоответсвиеВероятностиСловПоШаблону");
	Если СоответсвиеВероятностиСловПоШаблону=Неопределено Тогда
		СоответсвиеВероятностиСловПоШаблону = новый Соответствие;
		Для каждого стр из ТаблицаВекторовВероятностиСловКлассов Цикл
			ВероятностьШаблона = стр.Вектор.Получить(ШиринаСегментнойЛинии+1).Значение.ВероятностьЧастотная;
			ключ = нрег(стр.Класс+"/"+стр.Слово);
			СоответсвиеВероятностиСловПоШаблону.Вставить(ключ,ВероятностьШаблона);			
		КонецЦикла;
		КешВсехДанных.Вставить("СоответсвиеВероятностиСловПоШаблону",СоответсвиеВероятностиСловПоШаблону);
	КонецЕсли;
	
	
	СоответсвиеСловЗапроса = новый Соответствие;
	Для шаг=0 по ШиринаСегментнойЛинии Цикл
		Слово = ВекторЗапроса.Получить(шаг);
		СоответсвиеСловЗапроса.Вставить(Слово.Значение.Слово,1);
		Для каждого класс из ТаблицаКлассов Цикл
			// если шаблон закончился, тогда этого слова нет
			Данные2 = СоответствиеКлассовСлов.Получить(нрег(класс.Класс+"/"+"*"));
			Если Данные2.Вектор.Получить(шаг).Значение.Вероятность=1 Тогда
				Продолжить;
			КонецЕсли;
			СоответсвиеСловЗапроса.Вставить(нрег(класс.Класс+"/"+Слово.Значение.Слово),1);
		КонецЦикла;
	КонецЦикла;
	
	//Получим вероятность
	Для каждого класс из ТаблицаКлассов Цикл
		
		Если ЗначениеЗаполнено(ИмяШаблона) И НЕ класс.Класс=ИмяШаблона Тогда
			Продолжить;
		КонецЕсли;
		
		МаксКласса = 0;
		
		// пройдемся из входного запроса по позициям
		// I) Добавим вероятность попадания слов
		// запроса в шаблон
		// лишние слова не будем учитывать 
		// TODO: включить в настройку варианты поведения
		Для каждого эл из ВекторЗапроса Цикл
			
			слово = эл.Значение.Слово;
			шаг = эл.Значение.Шаг;
			
			// проверим на конец шаблона
			Данные2 = СоответствиеКлассовСлов.Получить(нрег(класс.Класс+"/"+"*"));
			
			Если Данные2.Вектор.Получить(шаг).Значение.Вероятность=1 Тогда
				Продолжить;
			КонецЕсли;
			
			
			Данные = СоответствиеКлассовСлов.Получить(нрег(класс.Класс+"/"+слово));
			
			Если НЕ Данные=Неопределено Тогда
				
				Вероятность = Данные.Вектор.Получить(шаг).Значение.Вероятность;
				Если Вероятность=0 Тогда
					Вероятность = Данные2.Вектор.Получить(шаг).Значение.Вероятность;
				КонецЕсли;				
				
				// Если слово отсутсвует в шаблоне и любое слово не допустимо
				// тогда скорее всего мы промахнулись
				Если Вероятность=0 Тогда
					МаксКласса = МаксКласса-10;  // каждое мимо уменьшает на 10
				Иначе
					МаксКласса = МаксКласса+Log10(Вероятность);
				КонецЕсли;				
			Иначе
				// пока отключим
				// TODO: включать по опции
				//Если Данные2.Вектор.Получить(шаг).Значение.Вероятность>0 Тогда
				//	МаксКласса = МаксКласса+Log10(Данные2.Вектор.Получить(шаг).Значение.Вероятность);
				//Иначе
				//	МаксКласса = МаксКласса-1000;
				//КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// количество совпадений должно быть в районе среднего
		
		// II) добавим вероятность от расстояния и
		// пройдемся на наличие вообще вероятности наличия слов, которые должны быть обязательно
		// т.е. если во всех шаблона слово присутсвует, то оно обязательно должно быть 
		// в запросе
		Для каждого слово из БазисСлов Цикл
			
			ВероятностьДистанции = 1;
			Вероятность = СоответсвиеВероятностиСловПоШаблону.Получить(нрег(класс.Класс+"/"+слово.Слово));
			Если Вероятность=0 ИЛИ Вероятность=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если слово.Слово="*" Тогда
				Продолжить;
			КонецЕсли;
			//ЕстьСлово = ?(СоответсвиеСловЗапроса.Получить(слово.Слово)=Неопределено,0,1);
			ЕстьСлово = ?(СоответсвиеСловЗапроса.Получить(нрег(класс.Класс+"/"+слово.Слово))=Неопределено,0,1);
			
			МассивДисЗапроса = СоответствиеДистанцииСловЗапрос.Получить(нрег("запрос"+"/"+слово.Слово));
			МассивДисШаблона = СоответствиеДистанцииСлов.Получить(нрег(класс.Класс+"/"+слово.Слово));
			
			Если ЕстьСлово=1 И Вероятность>0 Тогда
				
				Если МассивДисЗапроса=Неопределено ИЛИ МассивДисШаблона=Неопределено Тогда
					Сообщить("вероятности дистанций");
				Иначе
					
					МинДист = 999999999999;
					// найдем ближайшие
					Для каждого дист1 из МассивДисШаблона Цикл
						Для каждого дист2 из МассивДисЗапроса Цикл
							Если (дист1-дист2)*(дист1-дист2)<МинДист Тогда
								МинДист = (дист1-дист2)*(дист1-дист2);
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					
					МинДист = Sqrt(МинДист);
					ВероятностьДистанции = Exp(-МинДист);
					
					// если дистанция превышает ограничение, значит считаем, что этого слова нет
					// иначе будет мешок слов, а на важна последовательность
					Если МинДист>10 Тогда
						ЕстьСлово = 0;
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЕсли;
			
			Если Вероятность>1 Тогда
				Вероятность=1;
			КонецЕсли;
			ОценкаВероятности = ЕстьСлово*Вероятность*ВероятностьДистанции+(1-ЕстьСлово)*(1-Вероятность);
			//TODO: надо добавить уменьшение веоятности от расстояния до обычного положения
			
			Если ОценкаВероятности=0 Тогда
				МаксКласса = МаксКласса-1000;
			Иначе
				МаксКласса = МаксКласса+Log10(ОценкаВероятности);
			КонецЕсли;				
		КонецЦикла;
		
		// III) Учтем количество попавших слов запроса в шаблон
		// это не должно быть меньше како-го либо числа ~60-70%
		// TODO: включить в настройки
		
			
		Если МаксКласса<-1000 Тогда
			
		ИначеЕсли РезультатКлассификации.ОценкаОсновная<МаксКласса Тогда
			// сохраним старую
			РезультатКлассификации.ОценкаТретичная = РезультатКлассификации.ОценкаВторичная;
			РезультатКлассификации.СуждениеТретичный = РезультатКлассификации.СуждениеВторичный;
			РезультатКлассификации.КлассТретичный = РезультатКлассификации.КлассВторичный;
			
			РезультатКлассификации.ОценкаВторичная = РезультатКлассификации.ОценкаОсновная;
			РезультатКлассификации.СуждениеВторичный = РезультатКлассификации.СуждениеОсновной;
			РезультатКлассификации.КлассВторичный = РезультатКлассификации.КлассОсновной;
			
			РезультатКлассификации.ОценкаОсновная = МаксКласса;
			РезультатКлассификации.КлассОсновной = класс.Класс;				
			Если МаксКласса>-10 Тогда
				РезультатКлассификации.СуждениеОсновной="совпадение";
			ИначеЕсли МаксКласса>-50 Тогда
				РезультатКлассификации.СуждениеОсновной="возможно";
			ИначеЕсли МаксКласса>-100 Тогда
				РезультатКлассификации.СуждениеОсновной="сомнительно";
			ИначеЕсли МаксКласса>-1000 Тогда
				РезультатКлассификации.СуждениеОсновной="скорее случайность";
			КонецЕсли;
		ИначеЕсли РезультатКлассификации.ОценкаВторичная<МаксКласса Тогда
			// сохраним старую
			РезультатКлассификации.ОценкаТретичная = РезультатКлассификации.ОценкаВторичная;
			РезультатКлассификации.СуждениеТретичный = РезультатКлассификации.СуждениеВторичный;
			РезультатКлассификации.КлассТретичный = РезультатКлассификации.КлассВторичный;
			
			РезультатКлассификации.ОценкаВторичная = МаксКласса;
			РезультатКлассификации.КлассВторичный = класс.Класс;
			Если МаксКласса>-10 Тогда
				РезультатКлассификации.СуждениеВторичный="совпадение";
			ИначеЕсли МаксКласса>-50 Тогда
				РезультатКлассификации.СуждениеВторичный="возможно";
			ИначеЕсли МаксКласса>-100 Тогда
				РезультатКлассификации.СуждениеВторичный="сомнительно";
			ИначеЕсли МаксКласса>-1000 Тогда
				РезультатКлассификации.СуждениеВторичный="скорее случайность";
			КонецЕсли;
		ИначеЕсли РезультатКлассификации.ОценкаТретичная<МаксКласса Тогда
			// сохраним старую
			РезультатКлассификации.ОценкаТретичная = МаксКласса;
			РезультатКлассификации.КлассТретичный = класс.Класс;
			Если МаксКласса>-10 Тогда
				РезультатКлассификации.СуждениеТретичный="совпадение";
			ИначеЕсли МаксКласса>-50 Тогда
				РезультатКлассификации.СуждениеТретичный="возможно";
			ИначеЕсли МаксКласса>-100 Тогда
				РезультатКлассификации.СуждениеТретичный="сомнительно";
			ИначеЕсли МаксКласса>-1000 Тогда
				РезультатКлассификации.СуждениеТретичный="скорее случайность";
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЦикла;
	
	
	Возврат РезультатКлассификации;
КонецФункции

// Функция - Определяет наиболее вероятные границы шаблона
// меняет длину шаблона от наиболее вероятного начала и определяет границы
// с учетом предыдущих границ шаблонов
// 
// Возвращаемое значение:
//  ширина шаблона -  
//
&НаКлиенте
Функция ОпределитьДиапазоныШаблонов(Шаблон, Начало, Окончание) Экспорт
	
	// 1. берем точки и начинаем двигаться и искать минимум по шаблону
	// 2. От этого минимума начинаем отрезать кусочки и смотрим при каой длине будет оптимальный показатель
	// 3. Помечаем зону и идем дальше
		
КонецФункции

&НаКлиенте
Функция  ПолучитьВекторЗапроса(Текст,мНастройка)
	
	Вектор = новый СписокЗначений;
	//ТекстОбр = Модуль_ОбработкаТекста.ОбработатьТекстДанных(Текст,мНастройка);
	МассивСлов = СтрРазделить(Текст,Символы.ПС,Ложь);	
	
	Для шаг=0 по ШиринаСегментнойЛинии Цикл
		
		Слово = "*";
		Если шаг<МассивСлов.Количество() Тогда
			Слово = СокрЛП(МассивСлов.Получить(шаг));
		КонецЕсли;
		
		Вектор.Добавить(новый Структура("Слово,Шаг,Вероятность,Значение,Добавка",Слово,шаг,0,0,0),Строка(шаг)+"/"+Слово);
		
	КонецЦикла;	
	
	Возврат Вектор;
	
КонецФункции

#КонецОбласти


#Область Подготовка

&НаКлиенте
Процедура ПодготовитьБазис(Знач МассивСтруктурТекстов, мНастройка) Экспорт
	
	КешВсехДанных = новый Соответствие;
	
	Если НЕ мНастройка.Свойство("Вариант") Тогда
		мНастройка.Вставить("Вариант","");
	КонецЕсли;
	
	Если НЕ мНастройка.Свойство("ШиринаСегментнойЛинии") Тогда
		ШиринаСегментнойЛинии = 30;
		мНастройка.Вставить("ШиринаСегментнойЛинии",30);
	Иначе
		ШиринаСегментнойЛинии = мНастройка.ШиринаСегментнойЛинии;
	КонецЕсли;
	
	// инициализация
	ЗагрузитьБиблиотеки();
	
	// формируем текст общий
	Текст = "";
	Для каждого стр из МассивСтруктурТекстов Цикл
		Если НЕ ЗначениеЗаполнено(стр.Текст) Тогда
			Продолжить;
		КонецЕсли;
		Текст = Текст+" "+стр.Текст+" END_OF_TEXT_PARAGRAF ";
	КонецЦикла;
	
	// обработка текста
	ОбработанныйТекст = Модуль_ОбработкаТекста.ОбработатьТекстДанных(Текст,мНастройка); 	
	
	// формируем корпус текстов
	ЗаполнитьТаблицуКорпусаТекстовПоТекущемуТексту(МассивСтруктурТекстов,Текст,ОбработанныйТекст,мНастройка); 
	
	// формируем базис
	ПолучитьЧастотность(ОбработанныйТекст,мНастройка);
	
		
	// таблица векторов
	СформироватьТаблицуКлассов(мНастройка);
	СформироватьТаблицуВекторов(мНастройка);
	РассчитатьЧастотностьВероятностейСловПоКлассам(мНастройка);
	                 	
	// считаем вектор
	//РассчитатьВекторноеПространство(мНастройка);
	
	вхНастройка = мНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТаблицуКлассов(мНастройка)
	
	СоответсвиеКлассов = новый Соответствие;
	
	Для каждого стр из ТаблицаКорпусТекстов Цикл
		СоответсвиеКлассов.Вставить(стр.Класс,стр.Класс);
	КонецЦикла;
	
	ТаблицаКлассов.Очистить();
	Для каждого стр из СоответсвиеКлассов Цикл
		стр_н = ТаблицаКлассов.Добавить();
		стр_н.Класс = стр.Ключ;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТаблицуВекторов(мНастройка)
	
	ТаблицаВекторовВероятностиСловКлассов.Очистить();
	
	Для каждого класс из ТаблицаКлассов Цикл
		
		Для каждого слово из БазисСлов Цикл
			
			стр_н = ТаблицаВекторовВероятностиСловКлассов.Добавить();
			стр_н.Класс = класс.Класс;
			стр_н.Слово = слово.Слово;
			
			//формируем вектор
			Для шаг=0 по ШиринаСегментнойЛинии+1 Цикл
				
				стр_н.Вектор.Добавить(новый Структура("Слово,Шаг,Вероятность,ВероятностьЧастотная,Значение,Добавка,КоличествоЭксп,ДистанцияОтНачала,ЛюбоеСлово",слово.Слово,шаг,0,0,0,0,0,0,Ложь),Строка(шаг)+"/"+слово.Слово);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЧастотность(ОбработанныйТекст,мНастройка)
	
	КешБазисныхСлов = новый Соответствие;
	ТекстДляРазбора = СтрЗаменить(ОбработанныйТекст,нрег("END_OF_TEXT_PARAGRAF")," ");
	МассивСлов = СтрРазделить(ТекстДляРазбора," ",Ложь);
	
	ЧастотаСлов = новый Соответствие;
	
	Для каждого стр из МассивСлов Цикл
		
		Если СтрДлина(стр)<3 Тогда
			Продолжить;
		КонецЕсли;
		
		Количество = ЧастотаСлов.Получить(стр);
		
		Если Количество=Неопределено Тогда
			ЧастотаСлов.Вставить(стр,1);
		Иначе
			ЧастотаСлов.Вставить(стр,Количество+1);
		КонецЕсли;
		
	КонецЦикла;
	
	БазисСлов.Очистить();
	Для каждого стр из ЧастотаСлов Цикл
		стр_н = БазисСлов.Добавить();
		стр_н.Слово = стр.Ключ;
		стр_н.Частота = стр.Значение;
		стр_н.guid = Строка(новый UUID());
	КонецЦикла;
	
	БазисСлов.Сортировать("Частота Убыв");
	
	// добавляем *
	стр_н = БазисСлов.Добавить();
	стр_н.Слово = "*";
	стр_н.Частота = 0;
	стр_н.guid = Строка(новый UUID());
	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРазмерностьВектора() Экспорт
	Возврат БазисСлов.Количество();
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуКорпусаТекстовПоТекущемуТексту(МассивСтруктурТекстов,Текст,ОбработанныйТекст,мНастройки)
	
	ТаблицаКорпусТекстов.Очистить();
	
	ДанныеТекст = СтрЗаменить(Текст,"END_OF_TEXT_PARAGRAF",Символ(18));
	ДанныеТекст = СтрЗаменить(ДанныеТекст,нрег("END_OF_TEXT_PARAGRAF"),Символ(18));
	МассивТекстов = СтрРазделить(ДанныеТекст,Символ(18),Истина);
	
	ДанныеОбработанныйТекст = СтрЗаменить(ОбработанныйТекст,Символы.ПС," ");
	ДанныеОбработанныйТекст = СтрЗаменить(ДанныеОбработанныйТекст,"END_OF_TEXT_PARAGRAF",Символ(18));
	ДанныеОбработанныйТекст = СтрЗаменить(ДанныеОбработанныйТекст,нрег("END_OF_TEXT_PARAGRAF"),Символ(18));
	МассивОбработанныхТекстов = СтрРазделить(ДанныеОбработанныйТекст,Символ(18),Истина);
	
	ш=1;
	Для каждого стр из МассивОбработанныхТекстов Цикл

		Если НЕ ЗначениеЗаполнено(стр) Тогда
			Продолжить;
		КонецЕсли;
		стр_н = ТаблицаКорпусТекстов.Добавить();		
		стр_н.НомерДокумента = ш;
		стр_н.guid = Строка(новый uuid());
		стр_н.Текст = СокрЛП(МассивТекстов[ш-1]);
		стр_н.ОбработанныйТекст = ПолучитьКанонизированнуюСтроку(МассивОбработанныхТекстов[ш-1]);
		Если МассивСтруктурТекстов.Количество()>=ш Тогда
			стр_н.Класс = МассивСтруктурТекстов[ш-1].Заголовок;
			стр_н.СписокСлов.ЗагрузитьЗначения(МассивСтруктурТекстов[ш-1].МассивСтрок);
		КонецЕсли;
		ш=ш+1;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьКанонизированнуюСтроку(Знач Текст)
	
	ОбработаннаяТекстоваяСтрока = "";
	Текст = СтрЗаменить(Текст,Символы.ПС,"");
	МассивСлов = СтрРазделить(Текст," ",Ложь);
	
	Для каждого слово из МассивСлов Цикл
		Если НЕ ЗначениеЗаполнено(слово) Тогда
			Продолжить;
		КонецЕсли;
		ОбработаннаяТекстоваяСтрока = ОбработаннаяТекстоваяСтрока+ слово+ " ";
	КонецЦикла;
	
	Возврат ОбработаннаяТекстоваяСтрока;
КонецФункции


&НаКлиенте
Процедура РассчитатьЧастотностьВероятностейСловПоКлассам(мНастройка)
	
	СоответствиеКлассовСлов = новый Соответствие;
	Для каждого стр из ТаблицаВекторовВероятностиСловКлассов Цикл
		СоответствиеКлассовСлов.Вставить(нрег(стр.Класс+"/"+стр.Слово),стр);
	КонецЦикла;
	
	СоответсвиеСловПоКлассуНачальное = новый Соответствие;
	
	// вероятность для каждого шага
	Для шаг=0 по ШиринаСегментнойЛинии Цикл
		
		СоответсвиеСловПоКлассу = новый Соответствие;
		КоличествоВсегоЭксп = 0;
		
		// считаем частоту попадания
		Для каждого корп из ТаблицаКорпусТекстов Цикл
			
			Если корп.СписокСлов.Количество()>шаг Тогда
				
				Слово = корп.СписокСлов.Получить(шаг);
				
				Количество = СоответсвиеСловПоКлассу.Получить(нрег(корп.Класс+"/"+Слово));
				КоличествоЭксп = СоответсвиеСловПоКлассу.Получить(нрег(корп.Класс));
				СоответсвиеСловПоКлассу.Вставить(нрег(корп.Класс+"/"+"*"),Ложь);
				
				Если Количество=Неопределено Тогда
					Количество=0;
				КонецЕсли;
				
				Если КоличествоЭксп=Неопределено Тогда
					КоличествоЭксп=0;
				КонецЕсли;
				
				СоответсвиеСловПоКлассу.Вставить(нрег(корп.Класс+"/"+Слово),Количество+1);
				СоответсвиеСловПоКлассу.Вставить(нрег(корп.Класс),КоличествоЭксп+1);
				КоличествоВсегоЭксп = КоличествоВсегоЭксп + 1;
				
				
			Иначе    // ставим вероятность 1
				
				Если СоответсвиеСловПоКлассу.Получить(нрег(корп.Класс+"/"+"*"))=Неопределено Тогда
					СоответсвиеСловПоКлассу.Вставить(нрег(корп.Класс+"/"+"*"),Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// заносим данные по частоте
		Для каждого данн из ТаблицаВекторовВероятностиСловКлассов Цикл
			
			Количество =  СоответсвиеСловПоКлассу.Получить(нрег(данн.Класс+"/"+данн.Слово));
			КоличествоЭксп = СоответсвиеСловПоКлассу.Получить(нрег(данн.Класс));
			Структура = данн.Вектор.Получить(шаг);
			ТребуетсяВероятность1 = СоответсвиеСловПоКлассу.Получить(нрег(данн.Класс+"/"+"*"));
			
			Если ТребуетсяВероятность1=Истина и данн.Слово="*" Тогда
				Вероятность = 1;
			ИначеЕсли ТребуетсяВероятность1=Истина Тогда
				Вероятность = 0;
				Структура.Значение.ЛюбоеСлово = Истина;
			ИначеЕсли Количество=Неопределено Тогда
				//Вероятность = 1/(КоличествоЭксп+БазисСлов.Количество())/100;
				Вероятность = 0;
			Иначе			
				//Вероятность = (Количество+1)/(КоличествоЭксп+БазисСлов.Количество());
				Вероятность = Количество/КоличествоЭксп;
			КонецЕсли;
			
			Структура.Значение.Вероятность = Вероятность;
			Структура.Значение.ВероятностьЧастотная = Вероятность;
			Структура.Значение.Значение = Вероятность;
			Структура.Значение.КоличествоЭксп = КоличествоЭксп;
			
		КонецЦикла;
		
		Если шаг=0 Тогда
			Для каждого корп из ТаблицаКорпусТекстов Цикл
				СоответсвиеСловПоКлассуНачальное.Вставить(нрег(корп.Класс),СоответсвиеСловПоКлассу.Получить(нрег(корп.Класс)));
			КонецЦикла;
		КонецЕсли;
		
		Для каждого корп из ТаблицаКорпусТекстов Цикл
			
			КоличествоЭксп = СоответсвиеСловПоКлассуНачальное.Получить(нрег(корп.Класс));
			Если КоличествоЭксп=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			данн = СоответствиеКлассовСлов.Получить(нрег(корп.Класс+"/"+"*"));
			// если количество испытаний уменьшается,
			// тогда мы должны учесть любое слово шаблон
			Если шаг>0 И НЕ данн.Вектор.Получить(шаг).Значение.КоличествоЭксп=Неопределено
				И данн.Вектор.Получить(шаг).Значение.КоличествоЭксп<КоличествоЭксп Тогда
				Структура = данн.Вектор.Получить(шаг);
				Вероятность = 1-данн.Вектор.Получить(шаг).Значение.КоличествоЭксп/КоличествоЭксп;			
				Структура.Значение.Вероятность = Вероятность;
				Структура.Значение.Значение = Вероятность;
			КонецЕсли;
		КонецЦикла;
		
		
	КонецЦикла;	
	
	// растянем вероятность для каждого шага
	Для шаг=0 по ШиринаСегментнойЛинии Цикл
		
		Для каждого данн из ТаблицаВекторовВероятностиСловКлассов Цикл
			
			Структура = данн.Вектор.Получить(шаг);
			
			Если Структура.Значение.ЛюбоеСлово=Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Если шаг>0 Тогда
				СтруктураДо = данн.Вектор.Получить(шаг-1);
				СтруктураДо.Значение.Добавка = 
					СтруктураДо.Значение.Добавка+Структура.Значение.Вероятность*0.4;
			КонецЕсли;
			Если шаг<ШиринаСегментнойЛинии-1 Тогда
				СтруктураПосле = данн.Вектор.Получить(шаг+1);
				СтруктураПосле.Значение.Добавка = 
					СтруктураПосле.Значение.Добавка+Структура.Значение.Вероятность*0.4;
			КонецЕсли; 			
		
		КонецЦикла;
		
	КонецЦикла;	
	
	// растянем вероятность для каждого шага
	Для шаг=0 по ШиринаСегментнойЛинии Цикл
		
		Для каждого данн из ТаблицаВекторовВероятностиСловКлассов Цикл
			
			Структура = данн.Вектор.Получить(шаг);
			Если Структура.Значение.Слово="*" Тогда
				Если Структура.Значение.Вероятность=0 Тогда
					//Структура.Значение.Вероятность=0.0000000000000000000001;
					Структура.Значение.Вероятность=0.0;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			Структура.Значение.Вероятность = Структура.Значение.Вероятность+Структура.Значение.Добавка;
			Если Структура.Значение.Вероятность>1 Тогда
				Структура.Значение.Вероятность=1;
			КонецЕсли;
			Структура.Значение.Значение = Структура.Значение.Вероятность;
			Структура.Представление = Строка(шаг)+"/"+Строка(Структура.Значение.Вероятность);
			
			СтруктураЛюбоеСлово = СоответствиеКлассовСлов.Получить(нрег(данн.Класс+"/"+"*"));
			Если СтруктураЛюбоеСлово.Вектор.Получить(шаг).Значение.Вероятность<>0 И Структура.Значение.Вероятность=1 Тогда
				Структура.Значение.Вероятность=Структура.Значение.Вероятность-СтруктураЛюбоеСлово.Вектор.Получить(шаг).Значение.Вероятность/10;
			КонецЕсли;
	
		КонецЦикла;
		
	КонецЦикла;	
	
	СоответсвиеПовторенийСловШаблон = новый Соответствие;
	
	// посчитаем вероятность наличия слова в каждом шаблоне  
	Для каждого корп из ТаблицаКорпусТекстов Цикл
		
		СоответвиеСлов = новый Соответствие;
		Для каждого стр из корп.СписокСлов Цикл
			
			Слово = СоответвиеСлов.Получить(стр.Значение);
			Если НЕ Слово=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СоответвиеСлов.Вставить(стр.Значение,Истина);
			КоличествоПоявлений =  СоответсвиеПовторенийСловШаблон.Получить(нрег(корп.Класс+"/"+стр.Значение));
			Если КоличествоПоявлений=Неопределено Тогда
				КоличествоПоявлений=0;
			Конецесли;
			СоответсвиеПовторенийСловШаблон.Вставить(нрег(корп.Класс+"/"+стр.Значение),КоличествоПоявлений+1);
		КонецЦикла;
		
		КоличествоПримеров = СоответсвиеПовторенийСловШаблон.Получить(нрег(корп.Класс));
		Если КоличествоПримеров=Неопределено Тогда
			КоличествоПримеров=0;
		КонецЕсли;
		СоответсвиеПовторенийСловШаблон.Вставить(нрег(корп.Класс),КоличествоПримеров+1);
		
	КонецЦикла;
	
	Для каждого стр из ТаблицаВекторовВероятностиСловКлассов Цикл
		
		КоличествоПоявлений = СоответсвиеПовторенийСловШаблон.Получить(нрег(стр.Класс+"/"+стр.Слово));	
		КоличествоПримеров = СоответсвиеПовторенийСловШаблон.Получить(нрег(стр.Класс));	
		ПозицияЧастотности = стр.Вектор.Получить(ШиринаСегментнойЛинии+1);
		
		Если НЕ КоличествоПоявлений=Неопределено Тогда
			ПозицияЧастотности.Значение.ВероятностьЧастотная = КоличествоПоявлений/КоличествоПримеров;
			ПозицияЧастотности.Значение.Вероятность = ПозицияЧастотности.Значение.ВероятностьЧастотная;
			ПозицияЧастотности.Значение.Значение = ПозицияЧастотности.Значение.ВероятностьЧастотная;
			ПозицияЧастотности.Представление = Строка(ШиринаСегментнойЛинии+1)+"/"+Строка(ПозицияЧастотности.Значение.ВероятностьЧастотная);
		КонецЕсли;
		
	КонецЦикла;               	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТестКачетваОбучающихТекстов(мНастройка) Экспорт
	
	СоотвествиеРезультатовАнализа = Новый Соответствие;
	
	Для каждого Класс из ТаблицаКлассов Цикл
		
		РезультатАнализа = СоотвествиеРезультатовАнализа.Получить(Класс.Класс);
		Если РезультатАнализа=Неопределено Тогда
			РезультатАнализа = Новый Структура();
		КонецЕсли;
		
		мОтбор = Новый Структура("Класс",Класс.Класс);
		н_строки = ТаблицаВекторовВероятностиСловКлассов.НайтиСтроки(мОтбор);
		МассивОпорныхСлов = новый Массив;
		
		// пройдемся и поищем слова с вероятностью 1
		Для каждого стр из н_строки Цикл
			Если стр.Слово="*" Тогда
				Продолжить;
			КонецЕсли;
			//Ищем на частоту полную
			Вероятность = стр.Вектор.Получить(ШиринаСегментнойЛинии+1).Значение.ВероятностьЧастотная;
			Если Вероятность>=1 Тогда
				МассивОпорныхСлов.Добавить(Новый Структура("Слово,Вероятность",стр.Слово,Вероятность));
			КонецЕсли;
		КонецЦикла;
		
		Если МассивОпорныхСлов.Количество()=0 Тогда
			Сообщить("Для класса '"+Класс.Класс+"' не обнаружено опорных токенов/слов!");
		Иначе
			ЕстьНормальныеОпорныеСлова = Ложь;
			Для каждого стр из МассивОпорныхСлов Цикл
				Если Найти(стр.Слово,"команда") ИЛИ 
					Найти(стр.Слово,"найти_кнопку_формы_найти") ИЛИ 
					Найти(стр.Слово,"найти_окно_найти") ИЛИ 
					Найти(стр.Слово,"найти_поле_формы_что_искать") ИЛИ 
					Найти(стр.Слово,"найти_кнопку_формы_выбрать") ИЛИ 
					Найти(стр.Слово,"найти_форму_найти") ИЛИ 
					Найти(стр.Слово,"найти_кнопку_формы_расширенный_поиск") 
					Тогда
					Продолжить;
				КонецЕсли;
				ЕстьНормальныеОпорныеСлова = Истина;
				Прервать;
			КонецЦикла;
			Если НЕ ЕстьНормальныеОпорныеСлова=Истина Тогда
				Сообщить("Для класса '"+Класс.Класс+"' не обнаружено хороших опорных токенов/слов. Команды не являются хорошими опорными точками.!");
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЦикла;	
	
	Сообщить("Проверка завершена!");
	
	
КонецПроцедуры

#КонецОбласти


#Область ОбработкаАктивизации

&НаКлиенте
Процедура ТаблицаКлассовПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ТаблицаКлассов.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ТаблицаВекторовВероятностиСловКлассов.ОтборСтрок = Новый ФиксированнаяСтруктура("Класс",ТекущиеДанные.Класс); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВекторовВероятностиСловКлассовПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ТаблицаВекторовВероятностиСловКлассов.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВероятностейСлова.Очистить();
	мОтбор = новый Структура("Класс,Слово",ТекущиеДанные.Класс,ТекущиеДанные.Слово);
	н_строки = ТаблицаВекторовВероятностиСловКлассов.НайтиСтроки(мОтбор);
	Для каждого стр из н_строки[0].Вектор Цикл
		стр_н = ТаблицаВероятностейСлова.Добавить();
		стр_н.Шаг = стр.Значение.Шаг;
		стр_н.Вероятность = стр.Значение.Вероятность;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ЗагрузитьБиблиотеки() Экспорт
	
	Если Модуль_СтеммерПортера=Неопределено Тогда
		Модуль_СтеммерПортера = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_СтеммерПортера");
	КонецЕсли;		
	
	Если Модуль_ОбработкаТекста=Неопределено Тогда
		Модуль_ОбработкаТекста = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_ОбработкаТекста");
	КонецЕсли;		
	
КонецФункции




КешВсехДанных = новый Соответствие;
