&НаКлиенте
Перем КешСтеммераПортера;
&НаКлиенте
Перем Модуль_СтеммерПортера;
&НаКлиенте
Перем Модуль_ОбработкаТекста;
&НаКлиенте
Перем вхНастройка;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура ПоискБлизкихДокументов(Команда)
	ВыполнитьКлассификациюТекста(СтрокаЗапроса,вхНастройка);
	ОбработаннаяСтрокаЗапроса = Модуль_ОбработкаТекста.ОбработатьТекстДанных(СтрокаЗапроса,вхНастройка);
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаСвязиСловДокументовПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ТаблицаСвязиСловДокументов.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗначенийВероятности.Очистить();
	Для каждого стр из ТекущиеДанные.Вектор Цикл
		стр_н = ТаблицаЗначенийВероятности.Добавить();
		стр_н.Класс = ТекущиеДанные.Класс;
		стр_н.Слово = стр.Значение.Слово;
		стр_н.Вероятность = стр.Значение.Вероятность;
	КонецЦикла;
	
КонецПроцедуры


#Область Подготовка

&НаКлиенте
Процедура ПодготовитьБазис(Знач МассивСтруктурТекстов, мНастройка) Экспорт
	
	Если НЕ мНастройка.Свойство("Вариант") Тогда
		мНастройка.Вставить("Вариант","");
	КонецЕсли;
	
	// инициализация
	ЗагрузитьБиблиотеки();
	
	// формируем текст общий
	Текст = "";
	Для каждого стр из МассивСтруктурТекстов Цикл
		Если НЕ ЗначениеЗаполнено(стр.Текст) Тогда
			Продолжить;
		КонецЕсли;
		Текст = Текст+" "+стр.Текст+" END_OF_TEXT_PARAGRAF ";
	КонецЦикла;
	
	// обработка текста
	ОбработанныйТекст = Модуль_ОбработкаТекста.ОбработатьТекстДанных(Текст,мНастройка); 	
	
	// формируем корпус текстов
	ЗаполнитьТаблицуКорпусаТекстовПоТекущемуТексту(МассивСтруктурТекстов,Текст,ОбработанныйТекст,мНастройка); 
	
	// формируем базис
	ПолучитьЧастотность(ОбработанныйТекст,мНастройка);
	
	// 
	//// ВекторСловСписком
	//Если мНастройка.Свойство("БазисСлов") Тогда
	//	мНастройка.Вставить("ВекторСловСписком",СформироватьВекторСловСписком(мНастройка.БазисСлов));
	//Иначе
	//	мНастройка.Вставить("ВекторСловСписком",СформироватьВекторСловСписком(БазисСлов));
	//КонецЕсли;
	
	//// КешРасчетныхДанных
	//мНастройка.Вставить("КешРасчетныхДанных",новый Соответствие);
	//// КешСжатыхВекторов
	//мНастройка.Вставить("КешСжатыхВекторов",новый Соответствие);
	//// КешДанныхСжатыхВекторов
	//мНастройка.Вставить("КешДанныхСжатыхВекторов",новый Соответствие);
	
	// таблица векторов
	//СформироватьТаблицуВекторов(мНастройка);
	РассчитатьЧастотностьВероятностейСловПоКлассам(мНастройка);
	                 	
	// считаем вектор
	//РассчитатьВекторноеПространство(мНастройка);
	
	вхНастройка = мНастройка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЧастотность(ОбработанныйТекст,мНастройка)
	
	КешБазисныхСлов = новый Соответствие;
	ТекстДляРазбора = СтрЗаменить(ОбработанныйТекст,нрег("END_OF_TEXT_PARAGRAF")," ");
	МассивСлов = СтрРазделить(ТекстДляРазбора," ",Ложь);
	
	ЧастотаСлов = новый Соответствие;
	
	Для каждого стр из МассивСлов Цикл
		
		Если СтрДлина(стр)<3 Тогда
			Продолжить;
		КонецЕсли;
		
		Количество = ЧастотаСлов.Получить(стр);
		
		Если Количество=Неопределено Тогда
			ЧастотаСлов.Вставить(стр,1);
		Иначе
			ЧастотаСлов.Вставить(стр,Количество+1);
		КонецЕсли;
		
	КонецЦикла;
	
	БазисСлов.Очистить();
	Для каждого стр из ЧастотаСлов Цикл
		стр_н = БазисСлов.Добавить();
		стр_н.Слово = стр.Ключ;
		стр_н.Частота = стр.Значение;
		стр_н.guid = Строка(новый UUID());
	КонецЦикла;
	
	БазисСлов.Сортировать("Частота Убыв");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРазмерностьВектора() Экспорт
	Возврат БазисСлов.Количество();
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуКорпусаТекстовПоТекущемуТексту(МассивСтруктурТекстов,Текст,ОбработанныйТекст,мНастройки)
	
	ТаблицаКорпусТекстов.Очистить();
	
	ДанныеТекст = СтрЗаменить(Текст,"END_OF_TEXT_PARAGRAF",Символ(18));
	ДанныеТекст = СтрЗаменить(ДанныеТекст,нрег("END_OF_TEXT_PARAGRAF"),Символ(18));
	МассивТекстов = СтрРазделить(ДанныеТекст,Символ(18),Истина);
	
	ДанныеОбработанныйТекст = СтрЗаменить(ОбработанныйТекст,Символы.ПС," ");
	ДанныеОбработанныйТекст = СтрЗаменить(ДанныеОбработанныйТекст,"END_OF_TEXT_PARAGRAF",Символ(18));
	ДанныеОбработанныйТекст = СтрЗаменить(ДанныеОбработанныйТекст,нрег("END_OF_TEXT_PARAGRAF"),Символ(18));
	МассивОбработанныхТекстов = СтрРазделить(ДанныеОбработанныйТекст,Символ(18),Истина);
	
	ш=1;
	Для каждого стр из МассивОбработанныхТекстов Цикл

		Если НЕ ЗначениеЗаполнено(стр) Тогда
			Продолжить;
		КонецЕсли;
		стр_н = ТаблицаКорпусТекстов.Добавить();		
		стр_н.НомерДокумента = ш;
		стр_н.guid = Строка(новый uuid());
		стр_н.Текст = СокрЛП(МассивТекстов[ш-1]);
		стр_н.ОбработанныйТекст = ПолучитьКанонизированнуюСтроку(МассивОбработанныхТекстов[ш-1]);
		Если МассивСтруктурТекстов.Количество()>=ш Тогда
			стр_н.Класс = МассивСтруктурТекстов[ш-1].Заголовок;
			стр_н.СписокСлов.ЗагрузитьЗначения(МассивСтруктурТекстов[ш-1].МассивСтрок);
		КонецЕсли;
		ш=ш+1;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьКанонизированнуюСтроку(Знач Текст)
	
	ОбработаннаяТекстоваяСтрока = "";
	Текст = СтрЗаменить(Текст,Символы.ПС,"");
	МассивСлов = СтрРазделить(Текст," ",Ложь);
	
	Для каждого слово из МассивСлов Цикл
		Если НЕ ЗначениеЗаполнено(слово) Тогда
			Продолжить;
		КонецЕсли;
		ОбработаннаяТекстоваяСтрока = ОбработаннаяТекстоваяСтрока+ слово+ " ";
	КонецЦикла;
	
	Возврат ОбработаннаяТекстоваяСтрока;
КонецФункции

&НаКлиенте
Функция РассчитатьЧастотностьВероятностейСловПоКлассам(мНастройка)
	
	
	Классы = новый Соответствие();
	
	Для каждого стр из ТаблицаКорпусТекстов Цикл
		СтруктураКласса = Классы.Получить(стр.Класс);
		Если СтруктураКласса=Неопределено Тогда
			СтруктураКласса = новый Структура("Класс,МассивСтрок",стр.Класс,новый Массив);
		КонецЕсли;
		СтруктураКласса.МассивСтрок.Добавить(стр);
		Классы.Вставить(стр.Класс,СтруктураКласса);
	КонецЦикла;        	
	
	// вероятности все классов равны по умолчанию
	ТаблицаСвязиСловДокументов.Очистить();
	Для каждого стр из Классы Цикл
		стр_н = ТаблицаСвязиСловДокументов.Добавить();
		стр_н.Класс = стр.Значение.Класс;
		стр_н.Вероятность = 1/Классы.Количество();
		стр_н.Вектор = СформироватьВекторСловСписком(БазисСлов);
		
		ПорядокСловВектор = новый Соответствие;
		Для каждого век из стр_н.Вектор Цикл
			ПорядокСловВектор.Вставить(век.Значение.Слово,век);
		КонецЦикла;
		
		// вероятность будет
		КоличествоСловКласс = 0;
		Для каждого случ из стр.Значение.МассивСтрок Цикл
			Повторы = новый Соответствие;
			Для каждого вар из случ.СписокСлов Цикл				
				век = ПорядокСловВектор.Получить(вар.Значение);
				век.Значение.Количество = век.Значение.Количество+1;
				век.Значение.ВхожденийСлов = век.Значение.ВхожденийСлов+1/случ.СписокСлов.Количество();
				Если Повторы.Получить(вар.Значение) = Неопределено Тогда
					век.Значение.КоличествоРазНабор = век.Значение.КоличествоРазНабор+1;
					Повторы.Вставить(вар.Значение,Истина);
				КонецЕсли;
			КонецЦикла;
			КоличествоСловКласс = КоличествоСловКласс+случ.СписокСлов.Количество();
		КонецЦикла;
		
		Для каждого век из стр_н.Вектор Цикл
			Если мНастройка.Вариант="КоличествоРазНабор" Тогда 
				век.Значение.Вероятность = Окр((1+век.Значение.КоличествоРазНабор)/(Классы.Количество()+стр.Значение.МассивСтрок.Количество()),5);
			ИначеЕсли мНастройка.Вариант="НулеваяВероятностьБлиже0" Тогда 
				Если НЕ век.Значение.КоличествоРазНабор=0 Тогда
					век.Значение.Вероятность = Окр((1+век.Значение.КоличествоРазНабор)/(Классы.Количество()+стр.Значение.МассивСтрок.Количество()),5);
				Иначе
					век.Значение.Вероятность = Окр((1+век.Значение.Количество)/(КоличествоСловКласс),5);
				КонецЕсли;
			Иначе
				век.Значение.Вероятность = Окр((1+век.Значение.Количество)/(Классы.Количество()+КоличествоСловКласс),5);
			КонецЕсли;
			век.Значение.Значение = век.Значение.Вероятность;
		КонецЦикла;
		
	КонецЦикла; 	
	
КонецФункции

#КонецОбласти

#Область ВычислениеВероятности

&НаКлиенте
Функция ВыполнитьКлассификациюТекста(Текст,мНастройка) Экспорт
	
	РезультатКлассификации = новый Структура("КлассОсновной,КлассВторичный,ОценкаОсновная,ОценкаВторичная,СуждениеОсновной,СуждениеВторичный","","",-999999,0,"нет","нет");
	
	ТаблицаРезультатаБлизости.Очистить();
	КешОбработанныхСтрокКлассификатора = новый Соответствие;
	
	// преобразуем текст в вектор
	ВекторЗапроса = ПолучитьВекторЗапроса(Текст,мНастройка);
	
	// вычислим вероятности для каждого класса	
	Для каждого класс из ТаблицаСвязиСловДокументов Цикл
		
		// Получить вероятность
		Вероятность = ПолучитьВероятность(класс.Вектор,ВекторЗапроса);
		
		Если РезультатКлассификации.ОценкаОсновная<Вероятность Тогда
			РезультатКлассификации.ОценкаОсновная=Вероятность;	
			РезультатКлассификации.КлассОсновной=класс.Класс;	
		КонецЕсли;		
		
	КонецЦикла;
	
	Возврат  РезультатКлассификации;
	
КонецФункции	

&НаКлиенте
Функция ПолучитьВероятность(ВекторКласса,ВекторЗапроса)
	
	Вероятность = 0;
	
	СоотвВекторКласса = новый Соответствие;
	СоотвВекторЗапроса = новый Соответствие;
	
	Для каждого стр из ВекторЗапроса Цикл
		СоотвВекторЗапроса.Вставить(стр.Значение.Слово,стр.Значение);
	КонецЦикла;
	
	Для каждого стр из ВекторКласса Цикл
		СоотвВекторКласса.Вставить(стр.Значение.Слово,стр.Значение);
	КонецЦикла;
	
	Для каждого стр из ВекторКласса Цикл
		ПоСлово = СоотвВекторЗапроса.Получить(стр.Значение.Слово);
		Если ПоСлово=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		БитВключ = ?(ПоСлово.Количество>0,1,0);
		Вероятность = Вероятность+Log10(стр.Значение.Вероятность*БитВключ+(1-БитВключ)*(1-стр.Значение.Вероятность));
		//Вероятность = Вероятность*(стр.Значение.Вероятность*БитВключ+(1-БитВключ)*(1-стр.Значение.Вероятность));
	КонецЦикла;	
	
	//Для каждого стр из ВекторЗапроса Цикл
	//	ПоСлово = СоотвВекторКласса.Получить(стр.Значение.Слово);
	//	Если ПоСлово=Неопределено Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	БитВключ = ?(стр.Значение.Количество>0,1,0);
	//	Вероятность = Вероятность+Log10(ПоСлово.Вероятность*БитВключ+(1-БитВключ)*(1-ПоСлово.Вероятность));
	//	//Вероятность = Вероятность*(ПоСлово.Вероятность*БитВключ+(1-БитВключ)*(0.01));//+(1-БитВключ)*(1-ПоСлово.Вероятность);
	//	//Вероятность = Вероятность*(ПоСлово.Вероятность*БитВключ+(1-БитВключ)*(1-ПоСлово.Вероятность));
	//КонецЦикла;	
	
	//Для каждого стр из ВекторЗапроса Цикл
	//	ПоСлово = СоотвВекторКласса.Получить(стр.Значение.Слово);
	//	Если ПоСлово=Неопределено Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	БитВключ = ?(стр.Значение.Количество>0,1,0);
	//	//Если БитВключ=0 Тогда
	//	//	Продолжить;
	//	//КонецЕсли;
	//	//Вероятность = Вероятность+Log10(ПоСлово.Вероятность);
	//	Вероятность = Вероятность*(ПоСлово.Вероятность*БитВключ+(1-БитВключ)*(1-ПоСлово.Вероятность));
	//	//Вероятность = Вероятность*(ПоСлово.Вероятность*БитВключ+(1-БитВключ)*(1-ПоСлово.Вероятность));
	//КонецЦикла;	
	
	Если Вероятность=0 Тогда
		Возврат 0;
	КонецЕсли;
	//Возврат -Log10(Вероятность);
	Возврат Вероятность;
КонецФункции

#КонецОбласти

#Область ОбработкаВекторноеПространство

&НаКлиенте	
Функция СформироватьВекторСловСписком(БазисСлов)
	// вектор списка значений
	ВекторСловСписком = новый СписокЗначений;
	
	Для каждого Слово из БазисСлов Цикл
		Структура = новый Структура("Слово,Количество,ВхожденийСлов,Частота,КоличествоРазНабор,Вероятность,Значение",Слово.Слово,0,0,0,0,0,0);
		ЗаполнитьЗначенияСвойств(Структура,Слово);
		ВекторСловСписком.Добавить(Структура,Слово.Слово);
	КонецЦикла;
	// отсортируем
	ВекторСловСписком.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Если ВекторСловСписком.Количество()=0 Тогда
		//ВызватьИсключение "Вектор для автоматической классификации не задан! Выполните настройки!";
	КонецЕсли;
	
	Возврат ВекторСловСписком;
КонецФункции

&НаКлиенте	
Функция ПолучитьВекторЗапроса(Текст,мНастройка) Экспорт

	//ТекстОбр = Модуль_ОбработкаТекста.ОбработатьТекстДанных(Текст,мНастройка);
	МассивСлов = СтрРазделить(Текст,Символы.ПС,Ложь);
	
	Вектор = СформироватьВекторСловСписком(БазисСлов);
	
	ПорядокСловВектор = новый Соответствие;
	Для каждого век из Вектор Цикл
		ПорядокСловВектор.Вставить(век.Значение.Слово,век);
	КонецЦикла;
	
	Повторы = новый Соответствие;	
	Для каждого стр из МассивСлов Цикл
		век = ПорядокСловВектор.Получить(стр);
		Если век=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		век.Значение.Количество = век.Значение.Количество+1;
		век.Значение.Частота = век.Значение.Частота+1/МассивСлов.Количество();
		Если Повторы.Получить(стр) = Неопределено Тогда
			век.Значение.КоличествоРазНабор = век.Значение.КоличествоРазНабор+1;
			Повторы.Вставить(стр,Истина);
		КонецЕсли;		
	КонецЦикла;	
	
	Возврат Вектор;
	
КонецФункции

#КонецОбласти


&НаКлиенте
Функция ЗагрузитьБиблиотеки() Экспорт
	
	Если Модуль_СтеммерПортера=Неопределено Тогда
		Модуль_СтеммерПортера = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_СтеммерПортера");
	КонецЕсли;		
	
	Если Модуль_ОбработкаТекста=Неопределено Тогда
		Модуль_ОбработкаТекста = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_ОбработкаТекста");
	КонецЕсли;		
	
КонецФункции

КешСтеммераПортера = новый Соответствие;
КешРасчетныхДанных = новый Соответствие;
КешСжатыхВекторов = новый Соответствие;
КешДанныхСжатыхВекторов = новый Соответствие;
