&НаКлиенте
Перем КешСтеммераПортера;
&НаКлиенте
Перем Модуль_СтеммерПортера;


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Вставить содержимое обработчика
КонецПроцедуры

#Область Проверка

&НаКлиенте
Процедура ОбработатьТекст(Команда)
	мНастройка = СформироватьСтруктуруНастроекПоУмолчанию();
	ЗаполнитьЗначенияСвойств(мНастройка,ЭтаФорма);
	ОбработанныйТекст = ОбработатьТекстДанных(Текст,мНастройка);
КонецПроцедуры

#КонецОбласти


#Область ОбработкаТекста


&НаКлиенте
Функция СформироватьСтруктуруНастроекПоУмолчанию() Экспорт
	
	мНастройки = новый Структура();
	мНастройки.Вставить("Текст_ИспользоватьСтеммерПортера",Ложь);
	мНастройки.Вставить("Текст_РазделятьБольшойМаленький",Ложь);
	мНастройки.Вставить("Текст_УдалятьКомментарииКода",Истина);
	мНастройки.Вставить("Текст_УдалятьСтопСлова",Ложь);
	мНастройки.Вставить("Текст_УдалятьЦифры",Ложь);
	мНастройки.Вставить("Текст_УдалятьНомераДокументов",Ложь);	
	мНастройки.Вставить("Текст_УдалятьСтопФразы",Ложь);	
	мНастройки.Вставить("Текст_ЗаменитьСинонимы",Ложь);
	мНастройки.Вставить("Текст_НеИспользоватьIDF",Истина);
	Возврат мНастройки;

КонецФункции


&НаКлиенте
Процедура ПодготовитьДанныеДляОбработкиТекста(ИзМакетов=Истина) Экспорт
	
	// подгрузим стоп слова
	
	// подгрузим синонимы
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьТекстДанных(Знач ВходнойТекст,Знач мНастройка) Экспорт
	
	// если не загрузили, то загрузим
	ЗагрузитьБиблиотеки();
	
	// удалим переносы и другие символы
	ДанныеТекст = ВходнойТекст;
	
	ДанныеТекст = СтрЗаменить(ДанныеТекст,Символы.ПС," ");
	
	Если мНастройка.Текст_РазделятьБольшойМаленький Тогда
		ДанныеТекст = Текст_ОбработатьТекстRegExpReplaceМальнькаяЗаглавная(ДанныеТекст);
	КонецЕсли; 
	
	ДанныеТекст = нрег(ДанныеТекст);
	
	
	ДанныеТекст = Текст_ОбработатьТекстRegExp(ДанныеТекст,Истина,Истина);
	
	Если мНастройка.Текст_УдалятьКомментарииКода Тогда
		ДанныеТекст = Текст_ОбработатьТекстRegExpReplaceCodeComment(ДанныеТекст);
	КонецЕсли;	
	
	Если мНастройка.Текст_УдалятьНомераДокументов Тогда
		Текст_ОбработатьТекстRegExpReplaceNumberDocument(ДанныеТекст);
	КонецЕсли;	
	Если мНастройка.Текст_УдалятьЦифры Тогда
		ДанныеТекст = Текст_ОбработатьТекстRegExpУдалитьЦифры(ДанныеТекст);
	КонецЕсли;
	
	
	Если мНастройка.Текст_ЗаменитьСинонимы=Истина Тогда
		ДанныеТекст = Текст_ОбработатьЗаменитьСинонимыИзТекста(ДанныеТекст,Истина);
	КонецЕсли;	
	
	Если мНастройка.Текст_УдалятьСтопСлова=Истина Тогда
		ДанныеТекст = Текст_УдалитьСтопСловаИзТекста(ДанныеТекст);
	КонецЕсли;  	
	
	// Стеммер Портера используется для обработки массива данных, т.к. очень накладно
	Если мНастройка.Текст_ИспользоватьСтеммерПортера=Истина Тогда
		ТекстДляРазбора = СтрЗаменить(ДанныеТекст,Символы.ПС," ");
		МассивСлов = СтрРазделить(ТекстДляРазбора," ",Ложь);
		МассивСлов = ОбработатьМассивАлгоритмомСтеммингПриНеобходимости(МассивСлов,мНастройка);
		ДанныеТекст = СтрСоединить(МассивСлов," ");
	КонецЕсли;
		
	Возврат ДанныеТекст;

КонецФункции

&НаКлиенте
Функция ОбработатьТекстДанныхТолькоСтроки(Знач ВходнойТекст,Знач мНастройка) Экспорт
	
	// если не загрузили, то загрузим
	ЗагрузитьБиблиотеки();
	
	// удалим переносы и другие символы
	ДанныеТекст = ВходнойТекст;
	
	Если мНастройка.Текст_ЗаменитьСинонимы=Истина Тогда
		ДанныеТекст = Текст_ОбработатьЗаменитьСинонимыИзТекста(ДанныеТекст,Истина);
	КонецЕсли;	
	
	Если мНастройка.Текст_УдалятьСтопСлова=Истина Тогда
		ДанныеТекст = Текст_УдалитьСтопСловаИзТекста(ДанныеТекст);
	КонецЕсли;  	
	
	Если мНастройка.Текст_УдалятьСтопФразы=Истина Тогда
		ДанныеТекст = Текст_УдалитьСтопФразыИзТекста(ДанныеТекст);
	КонецЕсли;  	

	
	Если мНастройка.Текст_РазделятьБольшойМаленький Тогда
		ДанныеТекст = Текст_ОбработатьТекстRegExpReplaceМальнькаяЗаглавная(ДанныеТекст);
	КонецЕсли; 
	
	Если мНастройка.Текст_УдалятьКомментарииКода Тогда
		ДанныеТекст = Текст_ОбработатьТекстRegExpReplaceCodeComment(ДанныеТекст);
	КонецЕсли;	
	
	Если мНастройка.Текст_УдалятьНомераДокументов Тогда
		ДанныеТекст = Текст_ОбработатьТекстRegExpReplaceNumberDocument(ДанныеТекст);
	КонецЕсли;	
	
	Если мНастройка.Текст_УдалятьЦифры Тогда
		ДанныеТекст = Текст_ОбработатьТекстRegExpУдалитьЦифры(ДанныеТекст);
	КонецЕсли;       	
	
	ДанныеТекст = Текст_ОбработатьТекстRegExp(ДанныеТекст,Истина,Истина);
		
	Возврат ДанныеТекст;

КонецФункции

#Область REGEXPR

&НаКлиенте
Функция Текст_ОбработатьТекстRegExp(Знач Текст,ОставитьЧисла=Ложь,Перенос=Ложь)
	RegExp=Новый COMОбъект("VBScript.RegExp");
	RegExp.MultiLine=Истина; 
	RegExp.Global=Истина;
	Паттерн = "[^A-zА-я ";
	
	Если ОставитьЧисла Тогда
		Паттерн = Паттерн + "0-9";
	КонецЕсли;
	
	Если Перенос Тогда
		Паттерн = Паттерн +Символы.ПС;
	КонецЕсли;
	
	Паттерн = Паттерн+"]";
	
	RegExp.Pattern = Паттерн;
	
	Res = RegExp.Replace(Текст, " ");
	Возврат Res;  
КонецФункции

&НаКлиенте
Функция Текст_ОбработатьТекстRegExpУдалитьЦифры(Знач Текст)

	RegExp=Новый COMОбъект("VBScript.RegExp");
	RegExp.MultiLine=Истина; 
	RegExp.Global=Истина;
	Паттерн = "\b([0-9]{1,10})\b";
	Паттерн = "\b0[xX][0-9a-fA-F]+|[0-9]{1,10}\b";
	
	
	RegExp.Pattern = Паттерн;
	
	Res = RegExp.Replace(Текст, " ");
	Возврат Res;  
КонецФункции

&НаКлиенте
Функция Текст_ОбработатьТекстRegExpReplaceCodeComment(Знач Текст)

	RegExp=Новый COMОбъект("VBScript.RegExp");
	RegExp.MultiLine=Истина; 
	RegExp.Global=Истина;
	RegExp.IgnoreCase=Истина;
	Паттерн = "\s//.*(\b|\s)$";
	
	
	RegExp.Pattern = Паттерн;
	
	Res = RegExp.Replace(Текст, " ");
	Возврат Res;  
КонецФункции

&НаКлиенте
Функция Текст_ОбработатьТекстRegExpReplaceNumberDocument(Знач Текст)

	RegExp=Новый COMОбъект("VBScript.RegExp");
	RegExp.MultiLine=Истина; 
	RegExp.Global=Истина;
	RegExp.IgnoreCase=Истина;
	Паттерн = "(\d{1,}.{1,}-.*)\""";
	//Паттерн = "\d{1,}.*(\b|\s)$";
	
	
	RegExp.Pattern = Паттерн;
	
	Res = RegExp.Replace(Текст, " ");
	Возврат Res;  
КонецФункции



&НаКлиенте
Функция Текст_ОбработатьТекстRegExpReplaceМальнькаяЗаглавная(Знач Текст)

	RegExp=Новый COMОбъект("VBScript.RegExp");
	RegExp.MultiLine=Ложь; 
	RegExp.Global=Истина;
	
	// разбивает маленькаяБольша
	Паттерн = "([а-яё])([А-ЯЁ])";	
	RegExp.Pattern = Паттерн;
	
	Текст = RegExp.Replace(Текст, "$1 $2");
	
	// разбивает smallBig
	Паттерн = "([a-z])([A-Z])";	
	RegExp.Pattern = Паттерн;
	
	Текст = RegExp.Replace(Текст, "$1 $2");
	
	// разбивает маленькаяBig
	Паттерн = "([a-z])([А-ЯЁ])";	
	RegExp.Pattern = Паттерн;
	
	Текст = RegExp.Replace(Текст, "$1 $2");
	
	// разбивает smallБольшая
	Паттерн = "([а-яё])([A-Z])";	
	RegExp.Pattern = Паттерн;
	
	Текст = RegExp.Replace(Текст, "$1 $2");
	
	Возврат Текст;  
КонецФункции

#КонецОбласти

&НаКлиенте
Функция Текст_ОбработатьЗаменитьСинонимыИзТекста(Знач Текст,Знач ИспНРег=Ложь)
	
	ТекстБезСинонимовФраз = Текст;
	
	Если ИспНРег=Истина Тогда
		ТекстФразыСинонимы = нрег(ФразыСинонимы);
	Иначе 
		ТекстФразыСинонимы = ФразыСинонимы;
	КонецЕсли;
	МассивФразСинонимов = СтрРазделить(ТекстФразыСинонимы,Символы.ПС,Ложь);
	
	Для каждого фраза из МассивФразСинонимов Цикл
		Массив = СтрРазделить(фраза,"#",Ложь);
		Если Массив.Количество()<2 Тогда
			Продолжить;
		КонецЕсли;
		// добавим пробелы слева справа, чтобы не менял внутри слова
		ТекстБезСинонимовФраз = СтрЗаменить(ТекстБезСинонимовФраз," "+СокрЛП(Массив[0])+" "," "+СокрЛП(Массив[1])+" ");
	КонецЦикла;
	
	Возврат ТекстБезСинонимовФраз;
КонецФункции

&НаКлиенте
Функция Текст_УдалитьСтопСловаИзТекста(Знач Текст)
	
	ТекстБезСтопСлов = "";
	
	КешСтопСлов = новый Соответствие;
	ТекстСтопСлова = нрег(СтопСлова);
	ТекстСтопСлова = СтрЗаменить(ТекстСтопСлова," ",Символы.ПС);
	МассивСтопСлов = СтрРазделить(ТекстСтопСлова,Символы.ПС,Ложь);
	
	Для каждого стр из МассивСтопСлов Цикл
		стр = СокрЛП(стр);
		КешСтопСлов.Вставить(стр,стр);
	КонецЦикла;
	
	
	// разбиваем на слова
	Текст = СтрЗаменить(Текст,Символы.ПС," ##new_string## ");
	МассивСловТекста = СтрРазделить(Текст," ", Ложь);      
	
	// объединяем обратно                                     ,
	Для каждого слово из МассивСловТекста Цикл
		
		Если НЕ ЗначениеЗаполнено(слово) Тогда
			Продолжить;
		КонецЕсли;
		
		слово = СокрЛП(слово);
		
		Если НЕ КешСтопСлов.Получить(нрег(слово))=Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		
		Если нрег(слово)="##new_string##" Тогда
			ТекстБезСтопСлов = ТекстБезСтопСлов + Символы.ПС;
		ИначеЕсли нрег(слово)="end_of_text_paragraf" Тогда
			ТекстБезСтопСлов = ТекстБезСтопСлов + слово+" ";
		Иначе
			ТекстБезСтопСлов = ТекстБезСтопСлов + слово+" ";
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстБезСтопСлов;
КонецФункции


&НаКлиенте
Функция Текст_УдалитьСтопФразыИзТекста(Знач Текст)
	
	ТекстБезСтопФраз = "";
	
	КешСтопФраз = новый Соответствие;
	ТекстСтопФразы = нрег(СтопФразы);
	ТекстСтопФразы = СтрЗаменить(ТекстСтопФразы," ",Символы.ПС);
	МассивСтопФраз = СтрРазделить(ТекстСтопФразы,Символы.ПС,Ложь);
	
	Для каждого стр из МассивСтопФраз Цикл
		стр = СокрЛП(стр);
		КешСтопФраз.Вставить(стр,стр);
	КонецЦикла;
	
	
	// разбиваем на слова
	Текст = СтрЗаменить(Текст,Символы.ПС," ##new_string## ");
	МассивСловТекста = СтрРазделить(Текст," ", Ложь);
	
	// объединяем обратно                                     ,
	Для каждого слово из МассивСловТекста Цикл
		
		Если НЕ ЗначениеЗаполнено(слово) Тогда
			Продолжить;
		КонецЕсли;
		
		слово = СокрЛП(слово);
		
		Если НЕ КешСтопФраз.Получить(нрег(слово))=Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		
		Если нрег(слово)="##new_string##" Тогда
			ТекстБезСтопФраз = ТекстБезСтопФраз + Символы.ПС;
		ИначеЕсли нрег(слово)="end_of_text_paragraf" Тогда
			ТекстБезСтопФраз = ТекстБезСтопФраз + слово+" ";
		Иначе
			ТекстБезСтопФраз = ТекстБезСтопФраз + слово+" ";
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстБезСтопФраз;
КонецФункции

&НаКлиенте
Функция ОбработатьМассивАлгоритмомСтеммингПриНеобходимости(МассивСлов,мНастройка)
	
	// стеммер
	Если НЕ мНастройка.Текст_ИспользоватьСтеммерПортера Тогда
		Возврат МассивСлов;
	КонецЕсли;		
	
	ОбработанныйМассивСлов = новый Массив;
	
	МассивКУдалению = новый Массив;
	Для каждого стр из МассивСлов Цикл
		Стеммер = КешСтеммераПортера.Получить(стр);
		Если Стеммер=Неопределено Тогда
			Стеммер = Модуль_СтеммерПортера.ПрименитьСтеммерПортера(стр);
			КешСтеммераПортера.Вставить(стр,Стеммер);
		КонецЕсли;	
		//Стеммер = СтеммерПортераКлиентСерверПовтИсп.ПрименитьСтеммерПортера(стр);
		ОбработанныйМассивСлов.Добавить(Стеммер);
	КонецЦикла;
	
	Возврат ОбработанныйМассивСлов;

КонецФункции


// Функция - Получить макет на сервере
//
// Параметры:
//  ИмяМакета	 - строка	 - имя макета
// 
// Возвращаемое значение:
// макет  - макет
//
&НаСервере
Функция ПолучитьМакетНаСервере(ИмяМакета)
	Макет = Неопределено;
	Попытка
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		Макет = ОбработкаОбъект.ПолучитьМакет(ИмяМакета);
	Исключение
		Сообщить(ОписаниеОшибки());		
	КонецПопытки;
	Возврат Макет;
КонецФункции

#КонецОбласти

&НаКлиенте
Функция ЗагрузитьБиблиотеки() Экспорт
	
	Если Модуль_СтеммерПортера=Неопределено Тогда
		Модуль_СтеммерПортера = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_СтеммерПортера");
	КонецЕсли;		
	
	Если НЕ ЗначениеЗаполнено(СтопСлова) Тогда
		СтопСлова = ПолучитьМакетНаСервере("СтопСлова").ПолучитьТекст();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтопФразы) Тогда
		СтопФразы = ПолучитьМакетНаСервере("СтопФразы").ПолучитьТекст();
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ФразыСинонимы) Тогда
		ФразыСинонимы = ПолучитьМакетНаСервере("ФразыСинонимы").ПолучитьТекст();
	КонецЕсли; 	
	
КонецФункции



КешСтеммераПортера = новый Соответствие;