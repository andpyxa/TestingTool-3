&НаКлиенте
Перем СтарыеКолонки;
&НаКлиенте
Перем Модуль_ВекторноеПространство;
&НаКлиенте
Перем мНастройки_ВекторноеПространство;
&НаКлиенте
Перем Модуль_ВероятностнаяСеть;
&НаКлиенте 
Перем Модуль_ОбработкаТекста;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПутьККаталогуБиблиотекиСценариев = Параметры.ПутьККаталогуБиблиотекиСценариев;
	ТекстСценария = Параметры.ТекстСценария;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Модуль_ОбработкаТекста = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_ОбработкаТекста");
	Модуль_ВероятностнаяСеть = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_ВероятностнаяСеть");
	
	Если ШиринаОкнаВероятностнойСети=0 Тогда
		ШиринаОкнаВероятностнойСети=35;
	КонецЕсли;
	ОтображатьФормуНаивныйБайесПоСегментамПриИзменении(Неопределено);
	Если ЗначениеЗаполнено(ПутьККатлогуЛогикиШаблонов) Тогда
		ЗагрузитьШаблоны(Неопределено);
	КонецЕсли;
	ТекстШаблонаПриИзменении(Неопределено);
	Если ТаблицаОценокАнализа.Количество()=0 Тогда
		ИнициализироватьТаблицуАнализа();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьТаблицуАнализа()
	// 
	стр_н = ТаблицаОценокАнализа.Добавить();
	стр_н.Суждение = "совпадение";
	стр_н.ПорогСрабатывания = -10;
	стр_н.УстанавливатьФлагВыбора = Истина;
	// 
	стр_н = ТаблицаОценокАнализа.Добавить();
	стр_н.Суждение = "возможно";
	стр_н.ПорогСрабатывания = -50;
	стр_н.УстанавливатьФлагВыбора = Истина;
	// 
	стр_н = ТаблицаОценокАнализа.Добавить();
	стр_н.Суждение = "сомнительно";
	стр_н.ПорогСрабатывания = -100;
	стр_н.УстанавливатьФлагВыбора = Истина;
	// 
	стр_н = ТаблицаОценокАнализа.Добавить();
	стр_н.Суждение = "скорее случайность";
	стр_н.ПорогСрабатывания = -1000;
	стр_н.УстанавливатьФлагВыбора = Ложь;
КонецПроцедуры

#Область ОбработкаВероятностнойСетью

&НаКлиенте
Функция ПреобразоватьТекстМассивСтруктурМаркированныхДанных(мТекст,ИспользоватьГраммы=Истина)
	
	МассивСтруктур = новый Массив;
	МассивСтрок = СтрРазделить(мТекст,Символы.ПС,Ложь);
	
	БлокТекстов = новый Структура("Заголовок,Наименование,Текст,МассивСтрок","","","",новый Массив);
	Для каждого строка из МассивСтрок Цикл
		Если Найти(строка,"end_of_text_paragraf") Тогда
			БлокТекстов.Текст = СтрСоединить(БлокТекстов.МассивСтрок,Символы.ПС);
			МассивСтруктур.Добавить(БлокТекстов);
			БлокТекстов = новый Структура("Заголовок,Наименование,Текст,МассивСтрок","","","",новый Массив);
			Продолжить;
		ИначеЕсли Найти(строка,"name_of_pattern") Тогда
			БлокТекстов.Заголовок = Нрег(СокрЛП(СтрЗаменить(строка,"name_of_pattern","")));
			БлокТекстов.Наименование = БлокТекстов.Заголовок; // для совместимости
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(строка) Тогда
			Продолжить;
		КонецЕсли;
		Если ИспользоватьГраммы=Истина Тогда
			Грамм = Нрег(ПреобразоватьСтрокуГрамм(строка));
		Иначе
			Грамм = Нрег(СокрЛП(строка));
		КонецЕсли;
		БлокТекстов.МассивСтрок.Добавить(Грамм);
	КонецЦикла;
	
	БлокТекстов.Текст = СтрСоединить(БлокТекстов.МассивСтрок,Символы.ПС);

	МассивСтруктур.Добавить(БлокТекстов);
	
	Возврат МассивСтруктур;
	
КонецФункции

&НаКлиенте
Функция ПреобразоватьСтрокуГрамм(Знач ВхСтрока)
	Грамм="";
	СписокСлов = СтрРазделить(ВхСтрока," ",Ложь);
	Грамм = СтрСоединить(СписокСлов,"_");
	Возврат Грамм;
КонецФункции

// составим структуру путей к паттерну и наименований
&НаКлиенте
Функция ПолучитьНастройкиШаблоновПоТексту()
	
	СоответсвиеНастроек = новый Соответствие;
	
	Для каждого стр из ТаблицаСвойствШаблонов Цикл
		СоответсвиеНастроек.Вставить(стр.Шаблон,Новый Структура("Шаблон,Действие,ПутьШаблон",стр.Шаблон,стр.Действие,стр.ПутьШаблон));
	КонецЦикла;
	
	Возврат СоответсвиеНастроек;
КонецФункции

&НаКлиенте
Процедура МетодВероятностнаяСеть()
	
	//TODO: сделать быструю оценку возможности класса
	// т.е. если есть основные ключевые слова (вероятность наличия 0.9-1), 
	// то их остуствие сразу отрицает возможность класса
	
	ИндикаторПрогресса = 0;
	
	// настройки срабатывания
	СоотвествиеПараметрыСрабатывания = Новый Соответствие;
	Для каждого стр из ТаблицаОценокАнализа Цикл
		СоотвествиеПараметрыСрабатывания.Вставить(стр.Суждение,Новый Структура("Суждение,ПорогСрабатывания,УстанавливатьФлагВыбора",стр.Суждение,стр.ПорогСрабатывания,стр.УстанавливатьФлагВыбора));
	КонецЦикла;
	
	мНастройка = ПолучитьНастройкиОбработкиТекстов();
	
	Если ВероятностнаяСетьПодготовлена=Ложь Тогда
		ПодготовитьВероятностнаяСетьКРаботе(мНастройка);
	КонецЕсли;
	
	// выичлсяем
	мШиринаОкна = мНастройка.ШиринаСегментнойЛинии;
	ТекстСценарияБезПлохихСимволов = ТекстСценария;
	ТекстСценарияБезПлохихСимволов = Модуль_ОбработкаТекста.ОбработатьТекстДанныхТолькоСтроки(ТекстСценарияБезПлохихСимволов,мНастройка);
	
	// добиваем пусытми словами сценарий, чтобы взять последние символы
	Для шаг = 0 по мНастройка.ШиринаСегментнойЛинии Цикл
		ТекстСценарияБезПлохихСимволов = ТекстСценарияБезПлохихСимволов + Символы.ПС + "Любая_Фраза_До_Конца_Шаблона";
	КонецЦикла;

	МассивСтруктур = ПреобразоватьТекстМассивСтруктурМаркированныхДанных(ТекстСценарияБезПлохихСимволов);
	ТекстСценарияОбработанный = МассивСтруктур[0].Текст;
	МассивСловСценария = МассивСтруктур[0].МассивСтрок;
	ШиринаСценария = МассивСловСценария.Количество();
	
	
	ТаблицаСовпадений.Очистить();
	Для шаг=0 по ШиринаСценария-мШиринаОкна-1 Цикл		
		
		ТекстСканированияОкна = "";
		Для поз=шаг по шаг+мШиринаОкна-1 Цикл
			ТекстСканированияОкна = ТекстСканированияОкна+МассивСловСценария[поз]+Символы.ПС;
		КонецЦикла;   
		
		стр_н = ТаблицаСовпадений.Добавить();
		стр_н.Текст = МассивСловСценария[шаг];
		стр_н.НомерШагаНачало = шаг+1;
		стр_н.НомерШагаОкончание = шаг+мШиринаОкна+1;
		Результат = Модуль_ВероятностнаяСеть.ВыполнитьКлассификациюТекста(ТекстСканированияОкна,мНастройка);
		стр_н.Косинус = Результат.ОценкаОсновная;
		стр_н.Шаблон = Результат.КлассОсновной;	
		стр_н.Суждение = Результат.СуждениеОсновной;
		
		ИндикаторПрогресса = (шаг/(ШиринаСценария-мШиринаОкна-1))*90;
		ОбработкаПрерыванияПользователя();
        ОбновитьОтображениеДанных();		
		
	КонецЦикла;	
	
	// сгладим для случаев когда между одним и тем же шаблоном пустой разрыв
	// или два пустых, т.к. шаблон длинный и такого не может быть
	Для шаг=0 по ТаблицаСовпадений.Количество()-4 Цикл
		стр = ТаблицаСовпадений[шаг];
		стр2 = ТаблицаСовпадений[шаг+1];
		стр3 = ТаблицаСовпадений[шаг+2];
		стр4 = ТаблицаСовпадений[шаг+3];
		
		// один пропуск
		Если стр2.Шаблон="" И стр.Шаблон=стр3.Шаблон И стр.Шаблон<>"" Тогда
			стр2.Шаблон = стр.Шаблон;
			стр2.Суждение = "интерполяция";
			стр2.Косинус = -1000;
		КонецЕсли;
		
		// два пропуска
		Если стр2.Шаблон="" И стр3.Шаблон="" И стр.Шаблон=стр4.Шаблон И стр.Шаблон<>"" Тогда
			стр2.Шаблон = стр.Шаблон;
			стр2.Суждение = "интерполяция";
			стр2.Косинус = -1000;
			стр3.Шаблон = стр.Шаблон;
			стр3.Суждение = "интерполяция";
			стр3.Косинус = -1000;
		КонецЕсли;
		
	КонецЦикла;
	
	ИндикаторПрогресса=91;
	ОбработкаПрерыванияПользователя();
    ОбновитьОтображениеДанных();	
	
	ЗначениеШаблона = -1000;
	ИмяШаблонаНовыйФрагмент = "";
	ШагШаблона = 0;
	ШагОкончанияШаблона = 0;
	// прогоняем для определения размеров и расположения шаблонов
	Для шаг=0 по ТаблицаСовпадений.Количество()-1 Цикл
		
		стр = ТаблицаСовпадений[шаг];
		
		//TODO: Запрет перетираний, если суждение внутри имеет более слабую вероятность
		// кроме вложеннных
		Если стр.Шаблон<>ИмяШаблонаНовыйФрагмент Тогда
			Если ИмяШаблонаНовыйФрагмент="" Тогда
			Иначе
				ШагОкончанияШаблона = ШагШаблона+1; 
				// ишем границу
				внутр_шаг = мНастройка.ШиринаСегментнойЛинии;
				Пока внутр_шаг>0 Цикл
					
					ТекстСканированияОкна = "";
					Для поз=ШагШаблона по ШагШаблона+внутр_шаг Цикл
						Если поз>ТаблицаСовпадений.Количество()-1 Тогда
							Прервать;
						КонецЕсли;
						ТекстСканированияОкна = ТекстСканированияОкна+МассивСловСценария[поз]+Символы.ПС;
					КонецЦикла;   
					//TODO: выполнять классификацию только по одному шаблону, а не по всем
					Результат = Модуль_ВероятностнаяСеть.ВыполнитьКлассификациюТекста(ТекстСканированияОкна,мНастройка,ИмяШаблонаНовыйФрагмент);
					// если изменится, то прервать
					// обычно уменьшается, но может и улучшиться
					// добавить небольшое дрожание
					Если Окр(Результат.ОценкаОсновная,5)<>ЗначениеШаблона Тогда
						ШагОкончанияШаблона = ШагШаблона+внутр_шаг+1; // берем предыдущий шаг
						Прервать;
					КонецЕсли;
					внутр_шаг= внутр_шаг-1;
				КонецЦикла;
				ШагОкончанияШаблона = Мин(ШагОкончанияШаблона,ТаблицаСовпадений.Количество()-1);
				// формируем границу
				Для внутр_шаг=ШагШаблона по ШагОкончанияШаблона Цикл
					// перетираем, в случае ошибки
					ТаблицаСовпадений[внутр_шаг].ГраницыШаблона = ИмяШаблонаНовыйФрагмент;	
					Если внутр_шаг=ШагШаблона Тогда
						ТаблицаСовпадений[внутр_шаг].ГраницыШаблона=ТаблицаСовпадений[внутр_шаг].ГраницыШаблона+" : начало";
						ПараметрыСрабатывания = СоотвествиеПараметрыСрабатывания.Получить(ТаблицаСовпадений[внутр_шаг].Суждение);
						Если НЕ ПараметрыСрабатывания=Неопределено И ПараметрыСрабатывания.УстанавливатьФлагВыбора=Истина Тогда
							ТаблицаСовпадений[внутр_шаг].Выбрана = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ИмяШаблонаНовыйФрагмент = стр.Шаблон;
			ЗначениеШаблона = -1000;
			ШагШаблона = шаг;
			
		КонецЕсли;
		
		Если ЗначениеШаблона<стр.Косинус Тогда
			ЗначениеШаблона=стр.Косинус;
			ШагШаблона = шаг;
		КонецЕсли;
		
	КонецЦикла;
	
	ИндикаторПрогресса = 100;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНастройкиОбработкиТекстов()
	
	Перем мНастройка;
	
	// подготовим наивный байес
	мНастройка = Модуль_ОбработкаТекста.СформироватьСтруктуруНастроекПоУмолчанию();
	мНастройка.Текст_ИспользоватьСтеммерПортера=Ложь; // не нужен стеммер, пока
	мНастройка.Текст_УдалятьНомераДокументов=Истина; 
	мНастройка.Текст_УдалятьСтопФразы=Истина;
	мНастройка.Текст_УдалятьСтопФразы=Истина;
	мНастройка.Вставить("Вариант","КоличествоРазНабор");
	мНастройка.Вставить("ШиринаСегментнойЛинии",ШиринаОкнаВероятностнойСети);
	Возврат мНастройка;

КонецФункции

&НаКлиенте
Процедура ПодготовитьВероятностнаяСетьКРаботе(мНастройка)
	
	ТекстШаблона = "";
	
	Для каждого стр из ТаблицаСвойствШаблонов Цикл
		Если стр.Активность=Ложь Тогда
			Продолжить;
		КонецЕсли;
		мЗаголовок = "name_of_pattern "+стр.Шаблон;
		ТекстыШаблонов = СтрЗаменить(СокрЛП(стр.ТекстыШаблонов),"end_of_text_paragraf",Символ(18));
		МассивТекстов = СтрРазделить(ТекстыШаблонов,Символ(18),Ложь);
		ТекстыШаблонов = СтрСоединить(МассивТекстов,"end_of_text_paragraf"+Символы.ПС+Символы.ПС+мЗаголовок);
		ТекстШаблона = ТекстШаблона+мЗаголовок+Символы.ПС+Символы.ПС+ТекстыШаблонов+"end_of_text_paragraf"+Символы.ПС+Символы.ПС;
	КонецЦикла;
	
	ТекстШаблонаБезПлохихСимволов = Модуль_ОбработкаТекста.ОбработатьТекстДанныхТолькоСтроки(ТекстШаблона,мНастройка);	
	
	// получим массив структур	
	МассивСтруктур = ПреобразоватьТекстМассивСтруктурМаркированныхДанных(ТекстШаблонаБезПлохихСимволов);	
	
	// если были изменения подготовить
	Модуль_ВероятностнаяСеть.ПодготовитьБазис(МассивСтруктур,мНастройка);
	
	ВероятностнаяСетьПодготовлена = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ИнициироватьВероятностнуюСеть(Команда)
	
	мНастройка = ПолучитьНастройкиОбработкиТекстов();	
	ПодготовитьВероятностнаяСетьКРаботе(мНастройка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТекстДереваСценария(Команда)
	ТекстСценария = ЭтаФорма.ВладелецФормы.ПреобразоватьДеревоСценарияВТекст(ПреобразовыватьБлокиШагов);
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТексты;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНастройкуЛогикиПомощника(Модуль,НастройкиМодуля,Текст,Заголовки)
	
	МассивСтруктурТекстовДействий = новый Массив;
	
	МассивСлов = СтрРазделить(Текст," ",Ложь);
	МассивЗаголовков = СтрРазделить(Заголовки,Символы.ПС,Ложь);
	
	мТекст="";
	мЗаголовок = "";
	ш=0;
	Для каждого стр из МассивСлов Цикл
		
		Если Найти(стр,"end_of_text_paragraf") Тогда
			мСтруктура = Новый Структура;
			мСтруктура.Вставить("Текст",мТекст);
			Попытка
				мЗаголовок = СокрЛП(МассивЗаголовков[ш]);
			Исключение
				мЗаголовок = "Шаблон"+ш;
			КонецПопытки;
			мСтруктура.Вставить("Наименование",мЗаголовок);
			ш=ш+1;
			МассивСтруктурТекстовДействий.Добавить(мСтруктура);
			мТекст="";
		Иначе 
			мТекст = мТекст+стр+" ";
		КонецЕсли;
		
	КонецЦикла;
	
	

	Если НЕ мТекст="" Тогда
		Попытка
			мЗаголовок = СокрЛП(МассивЗаголовков[ш]);
		Исключение
			мЗаголовок = "Шаблон"+ш;
		КонецПопытки;
		
		мСтруктура = Новый Структура;
		мСтруктура.Вставить("Текст",мТекст);
		мСтруктура.Вставить("Наименование",мЗаголовок);
		МассивСтруктурТекстовДействий.Добавить(мСтруктура);
	КонецЕсли;

	
	НастройкиМодуля = СформироватьСтруктуруНастроекПоУмолчанию();
	
	НастройкиМодуля.Текст_НеИспользоватьIDF = НЕ (МассивСтруктурТекстовДействий.Количество()>1);

	Модуль.ПодготовитьБазис(МассивСтруктурТекстовДействий,НастройкиМодуля);
	
КонецПроцедуры

&НаКлиенте
Функция ОчиститьТекстОтплохихСимволов(Текст)
	
	ТекстРезультат = Текст;
	
	ТекстРезультат = СтрЗаменить(ТекстРезультат,":"," ");
	ТекстРезультат = СтрЗаменить(ТекстРезультат,"&"," ");
	ТекстРезультат = СтрЗаменить(ТекстРезультат,"*"," ");
	ТекстРезультат = СтрЗаменить(ТекстРезультат,"."," ");
	ТекстРезультат = СтрЗаменить(ТекстРезультат,"("," ");
	ТекстРезультат = СтрЗаменить(ТекстРезультат,")"," ");
	ТекстРезультат = СтрЗаменить(ТекстРезультат,""""," ");
	ТекстРезультат = СтрЗаменить(ТекстРезультат,"'"," ");
	ТекстРезультат = СтрЗаменить(ТекстРезультат,"\"," ");
	ТекстРезультат = СтрЗаменить(ТекстРезультат,"/"," ");
	
	Массив = СтрРазделить(ТекстРезультат," ",Ложь);
	ТекстРезультат = СтрСоединить(Массив," ");
	
	Возврат ТекстРезультат;
	
КонецФункции

&НаКлиенте
Функция СформироватьСтруктуруНастроекПоУмолчанию()
	
	мНастройки = новый Структура();
	мНастройки.Вставить("Текст_ИспользоватьСтеммерПортера",Истина);
	мНастройки.Вставить("Текст_РазделятьБольшойМаленький",Ложь);
	мНастройки.Вставить("Текст_УдалятьКомментарииКода",Истина);
	мНастройки.Вставить("Текст_УдалятьСтопСлова",Истина);
	мНастройки.Вставить("Текст_УдалятьЦифры",Ложь);
	мНастройки.Вставить("Текст_ЗаменитьСинонимы",Истина);
	мНастройки.Вставить("Текст_НеИспользоватьIDF",Истина);
	Возврат мНастройки;

КонецФункции

&НаКлиенте
Функция СформироватьМассивСтруктурЗаменШаблонов()
	
	МассивСтруктурЗамен  = Новый Массив;
	СтруктураЗамены = Неопределено;
	Шаблон = "";
	
	// Получаем настройки
	СоотвествиеНастроекШаблонов = ПолучитьНастройкиШаблоновПоТексту();
	
	
	// Формируем структуру замен
	Для каждого стр из ТаблицаСовпадений Цикл
		
		Если НЕ Найти(стр.ГраницыШаблона,Шаблон) И НЕ СтруктураЗамены=Неопределено Тогда
			СтруктураЗамены.Окончание = стр.НомерШагаНачало;
			Шаблон = "";
		КонецЕсли;
		
		Если Найти(стр.ГраницыШаблона,"начало") Тогда
			
			Если НЕ СтруктураЗамены=Неопределено Тогда
				МассивСтруктурЗамен.Добавить(СтруктураЗамены);
			КонецЕсли;
			
			НастройкаШаблона = СоотвествиеНастроекШаблонов.Получить(нрег(стр.Шаблон));
			Если НастройкаШаблона=Неопределено Тогда
				Сообщить("Не смог найти '"+стр.Шаблон+"' попробуйте обновить/открыть-закрыть");
			Иначе
				ПутьШаблон = СтрЗаменить(НастройкаШаблона.ПутьШаблон,ПутьККаталогуБиблиотекиСценариев,"");
				СтруктураЗамены = Новый Структура("Выбрана,Шаблон,Начало,Окончание,ПутьШаблон",стр.Выбрана,стр.Шаблон,стр.НомерШагаНачало,0,?(НастройкаШаблона=Неопределено,"",ПутьШаблон));
				Шаблон = стр.Шаблон;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ СтруктураЗамены=Неопределено Тогда
		МассивСтруктурЗамен.Добавить(СтруктураЗамены);
	КонецЕсли;
	Возврат МассивСтруктурЗамен;

КонецФункции

#КонецОбласти


#Область ОбработчикиСобытий


&НаКлиенте
Процедура ОтображатьФормуНаивныйБайесПоСегментамПриИзменении(Элемент)
	Если ОтображатьФормуВероятностнаяСеть=Истина Тогда
		Модуль_ВероятностнаяСеть.Открыть();
	Иначе
		Если Модуль_ВероятностнаяСеть.Открыта() Тогда
			Модуль_ВероятностнаяСеть.Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ШиринаОкнаВероятностнойСетиПриИзменении(Элемент)
	ВероятностнаяСетьПодготовлена = Ложь;
	Если ШиринаОкнаВероятностнойСети<5 Тогда
		Сообщить("Ширина окна должна быть более 5 шагов, рекомендуем от 25 до 50");
		ШиринаОкнаВероятностнойСети=5;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьЗамены(Команда)
	
	МассивСтруктурЗамен = СформироватьМассивСтруктурЗаменШаблонов();	
	
	// Оповещаем
	Оповестить("ПроставитьШаблоныЗамены",Новый Структура("МассивСтруктурЗамен,ПреобразовыватьБлокиШагов",МассивСтруктурЗамен,ПреобразовыватьБлокиШагов),ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИскатьСовпадения(Команда)

	МетодВероятностнаяСеть();	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТексты;
	
КонецПроцедуры  

#КонецОбласти



#Область Служебные


// Процедура - Создать динамические колонки таблицы
//
// Параметры:
//  ИмяТаблицы					 - строка	 - имя таблицы на форме строкой
//  МассивСтруктурКолонок		 - 	 - описание создаваемых колонок
//  МассивСтруктурТекущихКолонок - 	 - описание текущих колонок для удаления из текущей таблицы
&НаСервере
Процедура СоздатьДинамическиеКолонкиТаблицы(ИмяТаблицы,МассивСтруктурКолонок,МассивСтруктурТекущихКолонок,КромеИменКолонок="")
	
	МассивУдаляемыхЭлементов = новый Массив;
	МассивДобавляемыхЭлементов = новый Массив;
	
	Для каждого Колонка из МассивСтруктурТекущихКолонок Цикл
		Если Найти(КромеИменКолонок,Колонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		МассивУдаляемыхЭлементов.Добавить(ИмяТаблицы+"."+Колонка.Имя);
		Элементы.Удалить(Элементы[ИмяТаблицы+Колонка.Имя]);    
	КонецЦикла;   
	
	МассивТипов = новый Массив;
	МассивТипов.Добавить(Тип("ТаблицаЗначений"));           
	ОписаниеТиповТаблица = Новый ОписаниеТипов(МассивТипов);
	МассивТипов = новый Массив;
	МассивТипов.Добавить(Тип("Строка"));          
	ОписаниеТиповСтрока = Новый ОписаниеТипов(МассивТипов);
	
	Для каждого Колонка из МассивСтруктурКолонок Цикл
		Если Найти(КромеИменКолонок,Колонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		Если Колонка.ТипЗначения = ОписаниеТиповТаблица Тогда
			ОписаниеТипов = ОписаниеТиповСтрока;
		Иначе
			ОписаниеТипов = новый ОписаниеТипов(Колонка.ТипЗначения);
		КонецЕсли;
		НовыйРеквизит = Новый РеквизитФормы(Колонка.Имя, ОписаниеТипов, ИмяТаблицы, Колонка.Имя, Ложь);
		МассивДобавляемыхЭлементов.Добавить(НовыйРеквизит);
	КонецЦикла;
	
	Если МассивДобавляемыхЭлементов.Количество()=0 И МассивУдаляемыхЭлементов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхЭлементов,МассивУдаляемыхЭлементов);
	
	Для каждого Колонка из МассивСтруктурКолонок Цикл                       
		Если Найти(КромеИменКолонок,Колонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		СледующийЭлемент = Неопределено;
		Если НЕ Колонка.ИмяСледующегоЭлемента=Неопределено Тогда
			СледующийЭлемент = Элементы.Найти(Колонка.ИмяСледующегоЭлемента);
		КонецЕсли;
		НовыйЭлемент = Элементы.Вставить(Элементы[ИмяТаблицы].Имя+Колонка.Имя, Тип("Полеформы"), Элементы[ИмяТаблицы],СледующийЭлемент);
		Если Колонка.ТипСтрокой="Булево" Или  Колонка.ТипСтрокой="Boolean"Тогда
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		Иначе
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.Высота = 0;
			НовыйЭлемент.Ширина = Колонка.Ширина;                
		КонецЕсли;
		НовыйЭлемент.Видимость = Колонка.Видимость;
		НовыйЭлемент.Доступность = Истина;
		НовыйЭлемент.ТолькоПросмотр = Колонка.ТолькоПросмотр;   
		НовыйЭлемент.Заголовок = Колонка.Заголовок;
		НовыйЭлемент.Подсказка = Колонка.Заголовок;
		НовыйЭлемент.ПутьКДанным = ИмяТаблицы+"."+Колонка.Имя;    
	КонецЦикла;
	
	
КонецПроцедуры     

#КонецОбласти

#Область Настройки

&НаКлиенте
Процедура ПутьКФайлуАнализаСценариевНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	Диалог.Заголовок = "Выберите каталог"; 
	Диалог.МножественныйВыбор = Ложь; 
	ВыборФайлаОткрытияФайла = новый ОписаниеОповещения("ВыборФайлаОткрытияФайла",ЭтотОбъект,новый Структура("ИмяРеквизита","ПутьККатлогуЛогикиШаблонов"));
	Диалог.Показать(ВыборФайлаОткрытияФайла);

КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаОткрытияФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
		Если Найти(ДополнительныеПараметры.ИмяРеквизита,".") Тогда
			МассивЧастей = СтрРазделить(ДополнительныеПараметры.ИмяРеквизита,".",Ложь);
			ТекущиеДанные = Элементы[МассивЧастей[0]].ТекущиеДанные;
			ТекущиеДанные[МассивЧастей[1]] = ВыбранныеФайлы[0];
		Иначе
			ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита] = ВыбранныеФайлы[0]; 
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция  ПолучитьКаталогПоПутиФайла(Знач ПутьКФайлу)
	Файл = новый Файл(ПутьКФайлу);
	Возврат Файл.Путь;	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьШаблоны(Команда)
	
	ВероятностнаяСетьПодготовлена = Ложь;
	
	// Вставить содержимое обработчика.
	МассивФайлов = НайтиФайлы(ПутьККатлогуЛогикиШаблонов,"*.txt",Ложь);
	
	СоответствиеШаблонов = Новый Соответствие;
	Для каждого стр_файл из МассивФайлов Цикл
		ЭтоСвойства = Найти(стр_файл.ИмяБезРасширения,"-property");
		ИмяБезРасширения = СтрЗаменить(стр_файл.ИмяБезРасширения,"-property","");
		Структура = СоответствиеШаблонов.Получить(ИмяБезРасширения);
		Если Структура=Неопределено Тогда
			Структура = Новый Структура("Активность,Шаблон,ТекстыШаблонов,Действие,ПутьШаблон",Истина,"","","","");
		КонецЕсли;
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(стр_файл.ПолноеИмя,"UTF8");
		Если ЭтоСвойства Тогда
			ТекстСвойств = ТекстовыйДокумент.ПолучитьТекст();
			МассивСтрок = СтрРазделить(ТекстСвойств,Символы.ПС,Ложь);
			Для каждого стр из МассивСтрок Цикл
				Если Найти(стр,"name_of_pattern") Тогда
					Структура.Шаблон = нрег(СокрЛП(СтрЗаменить(стр,"name_of_pattern","")));
				ИначеЕсли Найти(стр,"action_of_pattern") Тогда
					Структура.Действие = СокрЛП(СтрЗаменить(стр,"action_of_pattern",""));
				ИначеЕсли Найти(стр,"path_to_pattern") Тогда
					Структура.ПутьШаблон = СокрЛП(СтрЗаменить(стр,"path_to_pattern",""));
				ИначеЕсли Найти(стр,"activity_of_pattern")  Тогда
					Структура.Активность = Булево(СокрЛП(СтрЗаменить(стр,"activity_of_pattern","")));
				КонецЕсли;
			КонецЦикла;
		Иначе
			Структура.ТекстыШаблонов = ТекстовыйДокумент.ПолучитьТекст();	
		КонецЕсли;
		СоответствиеШаблонов.Вставить(ИмяБезРасширения,Структура);
	КонецЦикла;
	
	ТаблицаСвойствШаблонов.Очистить();
	Для каждого стр из СоответствиеШаблонов Цикл
		стр_н = ТаблицаСвойствШаблонов.Добавить();
		стр_н.Активность = стр.Значение.Активность;
		стр_н.Шаблон = стр.Значение.Шаблон;
		стр_н.Действие = стр.Значение.Действие;
		стр_н.ПутьШаблон = стр.Значение.ПутьШаблон;
		// если есть : или // то путь абсолютный, иначе добавим путь к библиотеке
		Если НЕ (НЕ ЗначениеЗаполнено(стр_н.ПутьШаблон) ИЛИ Лев(стр_н.ПутьШаблон,2)="//" 
			ИЛИ Лев(стр_н.ПутьШаблон,2)="\\" ИЛИ Найти(стр_н.ПутьШаблон,":")) Тогда
			стр_н.ПутьШаблон = ПутьККаталогуБиблиотекиСценариев+?(Лев(стр_н.ПутьШаблон,1)="\" ИЛИ Лев(стр_н.ПутьШаблон,1)="/","","\")+стр_н.ПутьШаблон;
		КонецЕсли;
		стр_н.ТекстыШаблонов = стр.Значение.ТекстыШаблонов;
	КонецЦикла;
	
	ТаблицаСвойствШаблонов.Сортировать("Шаблон");
	
	ТекстШаблонаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблоны(Команда)
	
	Если НЕ ЗначениеЗаполнено(ПутьККатлогуЛогикиШаблонов) Тогда
		Сообщить("Не указан путь к каталогу описаний шаблонов!");
		Возврат;
	КонецЕсли;
	
	// сохраняем в каталог
	Для каждого стр из ТаблицаСвойствШаблонов Цикл
		
		БезопасноеПредставлениеШаблона = УдалитьОпасныеСимволы(стр.Шаблон);
		
		СохранитьТекстыШаблоновВФайл(БезопасноеПредставлениеШаблона, стр);
		
		СохранитьОписаниеСвойствШаблонаВФайл(БезопасноеПредставлениеШаблона, стр);
		
	КонецЦикла;	

	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекстыШаблоновВФайл(Знач БезопасноеПредставлениеШаблона, стр)
	Перем ПутьКШаблону;
	Перем Файл;
	Перем ТекстовыйДокумент;
	ПутьКШаблону = ПутьККатлогуЛогикиШаблонов+"\"+БезопасноеПредставлениеШаблона+".txt";
	
	Файл = Новый Файл(ПутьКШаблону);
	Если Файл.Существует() Тогда
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.УстановитьТекст(стр.ТекстыШаблонов);
	ТекстовыйДокумент.Записать(ПутьКШаблону,"UTF8");
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОписаниеСвойствШаблонаВФайл(Знач БезопасноеПредставлениеШаблона, стр)
	Перем ПутьШаблон;
	Перем ПутьКШаблонуСвойств;
	ПутьКШаблонуСвойств = ПутьККатлогуЛогикиШаблонов+"\"+БезопасноеПредставлениеШаблона+"-property.txt"; 
	
	Файл = Новый Файл(ПутьКШаблонуСвойств);
	Если Файл.Существует() Тогда
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.ДобавитьСтроку("activity_of_pattern "+XMLСтрока(стр.Активность));
	ТекстовыйДокумент.ДобавитьСтроку("name_of_pattern "+стр.Шаблон);
	ТекстовыйДокумент.ДобавитьСтроку("action_of_pattern "+стр.Действие);
	
	Если стр.ПутьШаблон="" Тогда
		Сообщить("Путь для шаблона ("+стр.Шаблон+") пустой!");
	ИначеЕсли НЕ Найти(стр.ПутьШаблон,ПутьККаталогуБиблиотекиСценариев) Тогда
		Сообщить("Для шаблона ("+стр.Шаблон+") путь ("+стр.ПутьШаблон+") указан вне библиотеки ("+ПутьККаталогуБиблиотекиСценариев+"). В сценарии могут быть проблемы с загрузкой!");
	КонецЕсли;		
	ПутьШаблон = СтрЗаменить(стр.ПутьШаблон,ПутьККаталогуБиблиотекиСценариев,"");
	ТекстовыйДокумент.ДобавитьСтроку("path_to_pattern "+ПутьШаблон);
	
	
	ТекстовыйДокумент.Записать(ПутьКШаблонуСвойств,"UTF8");
КонецПроцедуры

&НаКлиенте
Функция УдалитьОпасныеСимволы(Знач Текст)
	
	МассивЧастей = СтрРазделить(Текст,"|();:+!~`&^%*\/.""'><?",Ложь);
		
	Возврат СтрСоединить(МассивЧастей,"");
КонецФункции

&НаКлиенте
Процедура ДобавитьВОбучающуюВыборку(Команда)
	
	ВероятностнаяСетьПодготовлена = Ложь;
	
	// получим выделенный фрагмент
	НовыйФрагментШаблона = Элементы.ТекстСценария.ВыделенныйТекст;
	Если ИмяШаблонаНовыйФрагмент="" Тогда
		Сообщить("Укажите имя шаблона обязательно!");
		Возврат;
	КонецЕсли;
	ФрагментТекстаШаблона = НовыйФрагментШаблона+Символы.ПС+Символы.ПС+"end_of_text_paragraf"+Символы.ПС;
	
	мОтбор = Новый Структура("Шаблон",ИмяШаблонаНовыйФрагмент);
	н_строки = ТаблицаСвойствШаблонов.НайтиСтроки(мОтбор);
	
	Если н_строки.Количество()=0 Тогда
		стр_н = ТаблицаСвойствШаблонов.Добавить();
		стр_н.Шаблон = ИмяШаблонаНовыйФрагмент;
		стр_н.ТекстыШаблонов = ФрагментТекстаШаблона; 
	Иначе
		н_строки[0].ТекстыШаблонов = н_строки[0].ТекстыШаблонов+Символы.ПС+ФрагментТекстаШаблона;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстШаблонаПриИзменении(Элемент)
	ВероятностнаяСетьПодготовлена = Ложь;
	Элементы.ИмяШаблонаНовыйФрагмент.СписокВыбора.Очистить();;
	
	Для каждого настр из ТаблицаСвойствШаблонов Цикл
		Элементы.ИмяШаблонаНовыйФрагмент.СписокВыбора.Добавить(настр.Шаблон);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСвойствШаблоновПриИзменении(Элемент)
	ТекстШаблонаПриИзменении(Неопределено);
КонецПроцедуры



&НаКлиенте
Процедура ТаблицаСвойствШаблоновПутьШаблонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаСвойствШаблонов.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
	Диалог.Заголовок = "Выберите файл"; 
	Если ЗначениеЗаполнено(ТекущиеДанные.ПутьШаблон) Тогда
		Диалог.Каталог = ПолучитьКаталогПоПутиФайла(ТекущиеДанные.ПутьШаблон);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.ПутьШаблон) Тогда
		Файл = Новый Файл(ТекущиеДанные.ПутьШаблон);
		Диалог.ПолноеИмяФайла = Файл.Имя; 
	Иначе
		Диалог.ПолноеИмяФайла = ""; 
	КонецЕсли;
	Фильтр = "XML-файл (*.xml)|*.xml"; 
	Диалог.Фильтр = Фильтр; 
	Диалог.МножественныйВыбор = Ложь; 
	ВыборФайлаОткрытияФайла = новый ОписаниеОповещения("ВыборФайлаОткрытияФайла",ЭтотОбъект,новый Структура("ИмяРеквизита","ТаблицаСвойствШаблонов.ПутьШаблон"));
	Диалог.Показать(ВыборФайлаОткрытияФайла);

КонецПроцедуры


&НаКлиенте
Процедура СнятьФлажки(Команда)
	Для каждого стр из ТаблицаСовпадений Цикл
		стр.Выбрана = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	Для каждого стр из ТаблицаСовпадений Цикл
		Если Найти(стр.ГраницыШаблона,"начало") Тогда
			стр.Выбрана = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТестКачестваОбучающихТекстов(Команда)
	
	мНастройка = ПолучитьНастройкиОбработкиТекстов();	
	
	// 1 Подготовим сеть, если не было
	Если ВероятностнаяСетьПодготовлена=Ложь Тогда
		ПодготовитьВероятностнаяСетьКРаботе(мНастройка);	
	КонецЕсли;
	
	// 2 Пройдемся и посмотрим есть ли ключевые токены с вероятностью равной 1
	Модуль_ВероятностнаяСеть.ВыполнитьТестКачетваОбучающихТекстов(мНастройка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСвойствШаблоновТекстыШаблоновПриИзменении(Элемент)
	ВероятностнаяСетьПодготовлена = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСвойствШаблоновАктивностьПриИзменении(Элемент)
	ВероятностнаяСетьПодготовлена = Ложь;
КонецПроцедуры


#КонецОбласти

#Область РаботыШаблоныФайлы

&НаКлиенте
Процедура ТаблицаСвойствШаблоновПередУдалением(Элемент, Отказ)	
	
	ТекущиеДанные = Элементы.ТаблицаСвойствШаблонов.ТекущиеДанные;
	ТекущийИндекс = ТаблицаСвойствШаблонов.Индекс(ТекущиеДанные);
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;		
	КонецЕсли;	          
	
	Шаблон = ТекущиеДанные.Шаблон;   	
	БезопасноеПредставлениеШаблона = УдалитьОпасныеСимволы(Шаблон);		
	ПутьКШаблону = ПутьККатлогуЛогикиШаблонов+"\"+БезопасноеПредставлениеШаблона+".txt";
	ПутьКШаблонуСвойств = ПутьККатлогуЛогикиШаблонов+"\"+БезопасноеПредставлениеШаблона+"-property.txt"; 
	
	УдалениеФайловЗавершение = Новый ОписаниеОповещения("УдалениеФайловЗавершение",ЭтотОбъект,Новый Структура("Шаблон,ТекущийИндекс,УдалятьСтроку,ПутьКФайлу,Перемещение",Шаблон,ТекущийИндекс,Ложь,ПутьКШаблону,Ложь),"ОшибкаРаботыСФайлами",ЭтотОбъект);
	НачатьУдалениеФайлов(УдалениеФайловЗавершение,ПутьКШаблону);
	УдалениеФайловЗавершение = Новый ОписаниеОповещения("УдалениеФайловЗавершение",ЭтотОбъект,Новый Структура("Шаблон,ТекущийИндекс,УдалятьСтроку,ПутьКФайлу,Перемещение",Шаблон,ТекущийИндекс,Истина,ПутьКШаблонуСвойств,Ложь),"ОшибкаРаботыСФайлами",ЭтотОбъект);
	НачатьУдалениеФайлов(УдалениеФайловЗавершение,ПутьКШаблонуСвойств);
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура  УдалениеФайловЗавершение(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.УдалятьСтроку=Истина Тогда
		ТаблицаСвойствШаблонов.Удалить(ДополнительныеПараметры.ТекущийИндекс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура  ОшибкаРаботыСФайлами(ИнформацияОбОшибке,СтандартнаяОбработка,ДополнительныеПараметры) Экспорт
	Сообщить("Удалние/переименование файлов для шаблона "+ДополнительныеПараметры.Шаблон+" произошло с ошибкой!");
	Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСвойствШаблоновШаблонОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаСвойствШаблонов.ТекущиеДанные;
	ТекущийИндекс = ТаблицаСвойствШаблонов.Индекс(ТекущиеДанные);
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;		
	КонецЕсли;	          
	
	Шаблон = ТекущиеДанные.Шаблон;  
	
	Если НЕ ЗначениеЗаполнено(Шаблон) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйШаблон = Текст;
	
	Если НЕ ЗначениеЗаполнено(НовыйШаблон) Тогда
		Сообщить("Имя шаблона не должно быть пустым!");
		Возврат;
	КонецЕсли;
	
	БезопасноеПредставлениеШаблона = УдалитьОпасныеСимволы(Шаблон);		
	ПутьКШаблону = ПутьККатлогуЛогикиШаблонов+"\"+БезопасноеПредставлениеШаблона+".txt";
	ПутьКШаблонуСвойств = ПутьККатлогуЛогикиШаблонов+"\"+БезопасноеПредставлениеШаблона+"-property.txt"; 
	
	Файл = новый Файл(ПутьКШаблону);
	Если НЕ Файл.Существует() Тогда // не можем переместить, если файла нет
		Возврат;
	КонецЕсли;
	
	НовоеБезопасноеПредставлениеШаблона = УдалитьОпасныеСимволы(НовыйШаблон);		
	НовыйПутьКШаблону = ПутьККатлогуЛогикиШаблонов+"\"+НовоеБезопасноеПредставлениеШаблона+".txt";
	НовыйПутьКШаблонуСвойств = ПутьККатлогуЛогикиШаблонов+"\"+НовоеБезопасноеПредставлениеШаблона+"-property.txt"; 
	
	НачатьПеремещениеФайловЗавершение = Новый ОписаниеОповещения("НачатьПеремещениеФайловЗавершение",ЭтотОбъект,Новый Структура("Шаблон,ТекущийИндекс,УдалятьСтроку,ПутьКФайлу,Перемещение",Шаблон,ТекущийИндекс,Ложь,ПутьКШаблону,Истина),"ОшибкаРаботыСФайлами",ЭтотОбъект);
	НачатьПеремещениеФайла(НачатьПеремещениеФайловЗавершение,ПутьКШаблону,НовыйПутьКШаблону);
	НачатьПеремещениеФайловЗавершение = Новый ОписаниеОповещения("НачатьПеремещениеФайловЗавершение",ЭтотОбъект,Новый Структура("Шаблон,ТекущийИндекс,УдалятьСтроку,ПутьКФайлу,Перемещение",Шаблон,ТекущийИндекс,Ложь,ПутьКШаблонуСвойств,Истина),"ОшибкаРаботыСФайлами",ЭтотОбъект);
	НачатьПеремещениеФайла(НачатьПеремещениеФайловЗавершение,ПутьКШаблонуСвойств,НовыйПутьКШаблонуСвойств);

КонецПроцедуры


&НаКлиенте
Процедура  НачатьПеремещениеФайловЗавершение(ПеремещаемыйФайл,ДополнительныеПараметры) Экспорт
	//TODO: переименовать свойства описания шаблона
	Если Найти(ПеремещаемыйФайл,"property") Тогда
		// пересохраним свойства
		стр = ТаблицаСвойствШаблонов[ДополнительныеПараметры.ТекущийИндекс];
		БезопасноеПредставлениеШаблона = УдалитьОпасныеСимволы(стр.Шаблон);
		СохранитьОписаниеСвойствШаблонаВФайл(БезопасноеПредставлениеШаблона,стр);
	КонецЕсли;  
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСвойствШаблоновПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование=Истина Тогда
		ТекущиеДанные = Элементы.ТаблицаСвойствШаблонов.ТекущиеДанные;
		Если НЕ ТекущиеДанные=Неопределено Тогда
			ТекущиеДанные.Шаблон = ТекущиеДанные.Шаблон + " - копия";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти